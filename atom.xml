<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4eay7_lab &gt; blog</title>
  
  <subtitle>a lab notebook</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://4eay7lab.com/"/>
  <updated>2020-10-26T07:31:31.404Z</updated>
  <id>https://4eay7lab.com/</id>
  
  <author>
    <name>eregerm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>afa记录</title>
    <link href="https://4eay7lab.com/2019/12/23/afa-log/"/>
    <id>https://4eay7lab.com/2019/12/23/afa-log/</id>
    <published>2019-12-23T14:49:07.000Z</published>
    <updated>2020-10-26T07:31:31.404Z</updated>
    
    <content type="html"><![CDATA[<p>记录弱校蒟蒻icpcer被acm荒废（雾）的一年半（从大二到大三上）。</p><blockquote><p>以下比赛只列举比较有意义的国赛。</p></blockquote><h1 id="摸鱼记录"><a href="#摸鱼记录" class="headerlink" title="摸鱼记录"></a>摸鱼记录</h1><h2 id="这之前"><a href="#这之前" class="headerlink" title="这之前"></a>这之前</h2><h3 id="大学前"><a href="#大学前" class="headerlink" title="大学前"></a>大学前</h3><p>大学之前没接触过oi。</p><h3 id="校科协"><a href="#校科协" class="headerlink" title="校科协"></a>校科协</h3><p>大一军训时听了校科协宣讲会后才知道acm的。</p><p>听介绍，做面试题，直接被劝退了。</p><p>大一上并没有去学它。</p><h3 id="a协"><a href="#a协" class="headerlink" title="a协"></a>a协</h3><p>大一寒假看了《aha算法》（适合0基础看，最通俗易懂地讲解最基础的算法），目的只是了解算法知识，不是打acm。</p><p>大一下去玩了一下vijos（切水题都困难）。</p><p>想通过校赛，测试一下自己的实力。。。</p><p>结果xjb搞就一等奖了。</p><p>正好a协在招人。。。</p><p>因此进了a协。</p><h2 id="大一到大二暑假"><a href="#大一到大二暑假" class="headerlink" title="大一到大二暑假"></a>大一到大二暑假</h2><p>随便组了一个队伍（队友：mr、xxy），开始了暑假集训。</p><p>日常afk自学。。。</p><p>从0开始，学到了许多算法。。。</p><p>去做了luogu试炼场，依然切水题都困难。</p><p>学习主要看书看博客，不怎么刷题（一暑假白给）。</p><h2 id="大二上"><a href="#大二上" class="headerlink" title="大二上"></a>大二上</h2><h3 id="icpc南京区域赛-铁（倒数）（1题）"><a href="#icpc南京区域赛-铁（倒数）（1题）" class="headerlink" title="icpc南京区域赛 铁（倒数）（1题）"></a>icpc南京区域赛 铁（倒数）（1题）</h3><p>第1次打现场赛，算是学校送的体验名额。</p><p>这场我没认真打。</p><p>热身赛。好像爆零了。</p><p>正式赛。签到题A题是博弈论、找规律，队友全程找规律、猜规律，全程wa，我想了想就放弃了，去开别的题，结果也没开出来。最后队友终于把A题a了，也没多少时间开其它题了。</p><p>丢人退出赛场。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/afa-2.jpeg" alt="2018icpc南京区域赛" title>                </div>                <div class="image-caption">2018icpc南京区域赛</div>            </figure><p>打完心态崩了。。。</p><p>开始了xjb刷题，决心之后一定要拿个牌子。</p><h2 id="大二下"><a href="#大二下" class="headerlink" title="大二下"></a>大二下</h2><p>开了<a href="https://github.com/easypainttou/oi_solutions" target="_blank" rel="noopener">oi_solutions repo</a>，记录有意义的题目。因为觉得自己实力不够，所以记录的基本银区题或模板题。</p><h3 id="cccc-全国团队二等奖"><a href="#cccc-全国团队二等奖" class="headerlink" title="cccc 全国团队二等奖"></a>cccc 全国团队二等奖</h3><p>这场跟出去玩似的，最后分数在校内rk12/30。</p><p>这之后放假看wf直播，受到了一些激励。</p><h3 id="icpc西安邀请赛-银（尾）（5题）"><a href="#icpc西安邀请赛-银（尾）（5题）" class="headerlink" title="icpc西安邀请赛 银（尾）（5题）"></a>icpc西安邀请赛 银（尾）（5题）</h3><p>校内队伍选拔获得的名额。</p><p>第2次现场赛。</p><p>打之前还是很慌的，毕竟之前打了铁。</p><p>因为是周六出发的，所以没打热身赛。</p><p>正式赛。A题是水题，直接1a。队友开L题。我开了M题，当场想到的是最短路，1a（后来知道很多队都是bfs的）。队友L题没找到规律，我打了个表，过于着急乱交了2发，wa，然后把表给队友看，xxy看出规律才a了。然后一起开C题，讨论了一下，想了一个分类讨论计算的方法，我写完，样例没过，看了clarification才知道样例错了，然后1a。然后开始开D题，xxy讲了一下题意，我想到一个并查集+01背包的解法，然后写完交了一发re了，检查后发现数组存不下，改了一下，封榜的时候a了。最后1h开始afk划水。。。</p><p>最后摸了个银（银区基本5题，然而我们罚时太多了）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/afa-3.jpeg" alt="2019icpc西安邀请赛" title>                </div>                <div class="image-caption">2019icpc西安邀请赛</div>            </figure><h3 id="蓝桥杯c-c-b组-国二"><a href="#蓝桥杯c-c-b组-国二" class="headerlink" title="蓝桥杯c/c++ b组 国二"></a>蓝桥杯c/c++ b组 国二</h3><p>做填空题心态崩了，后面编程题没有认真做。</p><p>全程就当旅游。。。</p><h2 id="大二到大三暑假"><a href="#大二到大三暑假" class="headerlink" title="大二到大三暑假"></a>大二到大三暑假</h2><p>原队友准备考研（就业），退役了，于是我又随便重新组了一个队伍（队友：源妹、hxy）。</p><p>同班同学都去鹅厂实习了。。。其实这时已经不是很想打了。。。心理上最艰难的暑假，一直自闭，想要放弃。。但还是坚持了下去。。。</p><p>经历了银川网络赛，对icpc有些失望。</p><h2 id="大三上"><a href="#大三上" class="headerlink" title="大三上"></a>大三上</h2><h3 id="icpc南京区域赛-铜（首）（4题）"><a href="#icpc南京区域赛-铜（首）（4题）" class="headerlink" title="icpc南京区域赛 铜（首）（4题）"></a>icpc南京区域赛 铜（首）（4题）</h3><p>按网络赛排名给了1个名额（南昌网络赛差点罚时就出线了，有点可惜）。</p><p>据说这场是诸神之战，大概因为银川的事情，强队都来玩了。。慌的一批。</p><p>不过队友都比较认真，比赛前几周练了几场前几年的区域赛，前几天做了充足的讨论和准备，打印了一堆板子。。。</p><p>热身赛。交了一道水题就开始afk了，机器挂了几次，隔壁队伍都快ak了。</p><p>正式赛。队友开A题，我开K题。K题我想到一个二分的解法，先开始写了。队友找A题规律，写了一下，1a。我继续写K，大概1h的时候测试完，1a。然后源妹来写C题，我和hxy看别的题，大概又过去了1h，询问情况，发现读错题了，此时快被挤出铜区了，全队开始一起想C题，hxy想到入度和出度的关系，我看了一会，想出一个dp，需要先用dfs把长度小于4的个数先算出来，然后1a。快封榜了，一起开H题，hxy之前交了1发，wa，讨论很久，还是1发wa，最后我xjb想到1 0 0的情况答案是0，改了一下第一次的提交，a了，此时还剩十几分钟，开始afk。。。</p><p>罚时少了可以银，有点可惜。</p><p>一打完就赶紧溜回去汇编期末考试了。。。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/afa-4.jpeg" alt="2019icpc南京区域赛" title>                </div>                <div class="image-caption">2019icpc南京区域赛</div>            </figure><p>从此自认退役，想着再也不打。。。</p><p>已放弃蓝桥杯。</p><p>oi_solutions repo停止更新。</p><p>准备学习面试。</p><h2 id="这之后"><a href="#这之后" class="headerlink" title="这之后"></a>这之后</h2><p>去玩了一把校赛，个人赛，然后被给重组名额去ec final，于是重组了一个队伍（队友：zyj、qjy），练了2场水题（只有2周时间准备），不熟悉队友，团队配合也不是很熟，不适应环境，我也没尽全力打，摸鱼打铁 gg （2题）。</p><h1 id="得"><a href="#得" class="headerlink" title="得"></a>得</h1><ul><li><p>拿到了牌子（x</p></li><li><p>英语阅读理解能力（程序员基本素养）</p></li><li><p>思维能力（太棒了，确实变好了（x））</p></li><li><p>竞赛用算法和数据结构（狭隘而较深的算法知识，在工程中基本没用。。。）</p></li><li><p>人力debug程度的能力</p></li><li><p>积极的心态、集中的意识、自信沉着的品质（目前看来它的有无确实会影响到结果）</p></li><li><p>认识了dalao们和女装dalao们（打acm的感觉像回家一样，在a协里的感觉比家里感觉好多了！里面个个都是人才，说话又好听，我超喜欢里面的！）</p></li><li><p>功利上来说，保研考研有点帮助（主要加能力分，虽然我决定不读研），工作可过简历关？（玄学，主要看脸。以及据说这样做也有可能坑自己，算法题不出或者变难）</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/afa-1.jpeg" alt="太棒了，学到许多" title>                </div>                <div class="image-caption">太棒了，学到许多</div>            </figure><h1 id="失"><a href="#失" class="headerlink" title="失"></a>失</h1><ul><li><p>项目（虽然有，但都是玩具）</p></li><li><p>实习（正在找）</p></li><li><p>广阔的cs知识（似乎大多数书籍都是大一看的，之后一年半就开始刷题日常。。。）</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一年半，在3个不同的队伍打过现场赛。。。</p><p>没有抱到大腿，完全靠自己和队友从0开始。</p><p>成果：1银1铜（rk100+）</p><p>靠着队友合作以及一部分的运气，最好时是区域赛铜首银尾的水平。。。（毕竟是5小时被卡easy题的蒟蒻qwq）</p><p>一言以蔽之，比较菜，投入时间很多，收效却甚微。</p><p>（主要学习方法的问题，入坑后的半年多走了不少弯路）</p><hr><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/afa-0.png" alt="坑" title>                </div>                <div class="image-caption">坑</div>            </figure><p>acm是个大坑，并没有非常热爱，想要金牌大概还需要一年，wf更不可能，溜了溜了。。。希望校队dalao们继续加油！~</p><hr><h1 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h1><p>作为一个最好rk100+的蒟蒻，来传授经验，有点丢人。</p><p>然而毕竟一年半了，有很多感想，所以觉得还是有必要说一下自己的建议，希望学弟学妹能少走弯路。</p><blockquote><p>以下内容适合萌新，不适合dalao。</p></blockquote><h2 id="劝退"><a href="#劝退" class="headerlink" title="劝退"></a>劝退</h2><p>总的来说我不建议打。acm像游戏，所以不建议沉迷游戏（雾）。</p><p>对于考虑打acm的同学。</p><p>首先要认清自己的能力，找准定位。以前有oi经历，并且打得好的，或者，到大学才开始打的，有天赋并且愿意付出许多的，可以打。若是不擅长，打了一年还是不擅长，那还是早点放弃，专注于其他竞赛或者实际工程项目更好。</p><p>接触acm后，请确定自己是否真正热爱acm。若只是为了功利的目的，建议放弃。</p><p>如果学校不是强校而是弱校，也要再三考虑，一般弱校需要付出更多个人的努力。</p><p><del>最后，打acm会越打越穷，想要奖金建议ctf（雾）。</del></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>如果已经准备打了。</p><p>想要打好xcpc，2种策略。</p><h3 id="1人切题带队友，队友打辅助"><a href="#1人切题带队友，队友打辅助" class="headerlink" title="1人切题带队友，队友打辅助"></a>1人切题带队友，队友打辅助</h3><p>对于蒟蒻来说不行，不常见，也不建议自己不努力只想着队友带，3人都这亚子就gg了。（w</p><h3 id="注重团队配合"><a href="#注重团队配合" class="headerlink" title="注重团队配合"></a>注重团队配合</h3><p>这是正常的方案。</p><p>首先要找队友，最好找到同年级的志同道合的同学一起玩。最好大一就开始，一起练习和讨论。。。（不要像我一样大二才开始，还一直重组）对于学妹，是否组女队，我建议如果找不到好的队友当然不建议强行组，找志同道合的组就好了（女队唯一优势是最佳女队（这个一般就别想了，除非没有强队或者你们是强队）和参加女生赛（有点水））。</p><p>组好队了，开始分题。所有队员都要练习思维能力，最好都要会做不需要算法的思维水题。然后开始专题分工，一个专题至少需要2人进行深入研究和练习，将知识点全部覆盖。学习打acm最有效的方法是刷题，以题来学习知识。一定不要只看不练。（我主要刷的蓝书习题，以及loj和kuangbin专题）</p><p>需要经常训练，包括个人训练和组队训练。（建议自己拉题做，有针对性的。。我们主要练历年真题，以及hdu多校）</p><p>除此之外，多打cf的比赛，练习实战切题能力。rating要努力到1900+，这样基本就稳银了（当然我还没有qwq）。</p><h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><p>xcpc比赛都是3个人用1台电脑。</p><p>首先，3人对于题目的讨论要活跃，表意明确。</p><p>其次，不经充分思考就编写的现象很常见，所以建议在上机敲代码前多思考，以提高协作效率。</p><p>虽然正式比赛可以使用模板，但是平时不建议依赖板子，比赛也不建议。其实这个自己敲多了也就会了。</p><p>在交题前注意检查常见问题，小心罚时。</p><p>最后，最重要的3个人都要有决心，不要轻易放弃。</p><p>不出锅，手速快，拿个铜没问题，运气好摸个银。</p><p>然后关于如何冲金，我没有的，这个问dalao们吧（qwq</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><blockquote><p>the best or nothing</p></blockquote><p>既然进来打了，就不要划水了，努力争取，不要留下遗憾，否则最后可能浪费了几年时间而一无所得。</p><h1 id="遗产"><a href="#遗产" class="headerlink" title="遗产"></a>遗产</h1><p><a href="https://github.com/easypainttou/oi_solutions" target="_blank" rel="noopener">我的题解</a></p><p><a href="https://github.com/F0RE1GNERS/template" target="_blank" rel="noopener">推荐的板子</a></p><p><a href="https://byrio.org/how-to-oi/" target="_blank" rel="noopener">推荐的入门指南</a></p><p><a href="https://blog.csdn.net/weixin_37517391/article/details/84098882" target="_blank" rel="noopener">推荐的经验总结</a></p><p><a href="https://oi-wiki.org/" target="_blank" rel="noopener">推荐的wiki</a></p><p><a href="https://acm.njupt.edu.cn/" target="_blank" rel="noopener">顺便推荐一下noj</a></p><p><del><a href="https://www.zhihu.com/answer/12710541" target="_blank" rel="noopener">劝退1</a></del></p><p><del><a href="https://www.zhihu.com/answer/27597264" target="_blank" rel="noopener">劝退2</a></del></p><p><del><a href="https://www.zhihu.com/answer/387430434" target="_blank" rel="noopener">劝退3</a></del></p><hr><h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><h2 id="2019-12-28"><a href="#2019-12-28" class="headerlink" title="2019-12-28"></a>2019-12-28</h2><p><a href="https://mp.weixin.qq.com/s/TXKPLCk77mLloi0dlZpSLQ" target="_blank" rel="noopener">最近看到一篇和我总结的差不多的总结（推荐读一下姥姥的信）</a></p><h2 id="2019-12-30"><a href="#2019-12-30" class="headerlink" title="2019-12-30"></a>2019-12-30</h2><p>更新了一些内容…_(:з」∠)_</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录弱校蒟蒻icpcer被acm荒废（雾）的一年半（从大二到大三上）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下比赛只列举比较有意义的国赛。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;摸鱼记录&quot;&gt;&lt;a href=&quot;#摸鱼记录&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="其它" scheme="https://4eay7lab.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="acm" scheme="https://4eay7lab.com/tags/acm/"/>
    
      <category term="记录" scheme="https://4eay7lab.com/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="总结" scheme="https://4eay7lab.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="吐槽" scheme="https://4eay7lab.com/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>sicp ch1-3 笔记</title>
    <link href="https://4eay7lab.com/2019/08/05/sicp-123/"/>
    <id>https://4eay7lab.com/2019/08/05/sicp-123/</id>
    <published>2019-08-04T16:00:00.000Z</published>
    <updated>2020-10-26T07:31:31.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>sicp是编程方面的入门课程。</p><p>有关sicp的资源和评价很多，在此不多介绍。</p><p>一些相关资源链接：</p><p><a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html" target="_blank" rel="noopener">书</a></p><p><a href="https://sicp.readthedocs.io/en/latest/" target="_blank" rel="noopener">SICP 解题集</a></p><p><a href="https://deathking.github.io/yast-cn/" target="_blank" rel="noopener">scheme tutorial</a></p><h1 id="ch1-用过程构建抽象"><a href="#ch1-用过程构建抽象" class="headerlink" title="ch1 用过程构建抽象"></a>ch1 用过程构建抽象</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="计算过程（computational-process）"><a href="#计算过程（computational-process）" class="headerlink" title="计算过程（computational process）"></a>计算过程（computational process）</h3><p>过程是计算机中抽象的存在，能够产生其他抽象的东西——数据（data）。过程的演变被程序（program）指导，程序由编程语言（programming languages）中的符号表达组成。程序可能有错误，需要debug。</p><h3 id="使用lisp编程"><a href="#使用lisp编程" class="headerlink" title="使用lisp编程"></a>使用lisp编程</h3><p>lisp（LISt Processing的缩写）发明于20世纪50年代后期，被用于计算模型的某种逻辑表达式（称为递归方程（recursion equations））的使用的推理的形式。lisp有很多方言，这里使用scheme。</p><p>lisp不是主流语言，使用的原因是，它拥有独特的特点，使它成为学习重要的编程结构和数据结构以及和支持它们的语言特点相关联的极好的媒介。最重要的是，lisp的过程的描述（称为procedure）本身可以被作为lisp数据来表达或操作。</p><h2 id="编程的要素"><a href="#编程的要素" class="headerlink" title="编程的要素"></a>编程的要素</h2><p>强大的编程语言不仅是指导计算机执行任务的方法，而且能作为组织思想和过程的框架。</p><p>强大的语言的3个机制：</p><ul><li>基础表达式（primitive expressions）：最简单的实体</li><li>组合的方法（means of combination）：使用简单的元素构造复合元素</li><li>抽象的方法（means of abstraction）：组合元素被作为单元命名和操作</li></ul><p>在编程中，我们处理2类元素：过程和数据。数据是我们想要操作的东西。过程是操作数据的规则的描述。任何强大的程序设计语言必须能表述基本的数据和过程，还需要提供对过程和数据组合和抽象的方法。</p><p>第1章只处理最简单的数值数据，以关注构建过程的规则。</p><p>以下大概是scheme的简单使用，有的不展开。</p><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>一些与scheme解释器交互的实例，输入表达式以求值（evaluate）。包括基础表达式、组合式（combinations）。</p><h3 id="命名和环境"><a href="#命名和环境" class="headerlink" title="命名和环境"></a>命名和环境</h3><p>程序设计语言需要提供一种通过名字去使用计算对象的方式。名字标识符被称为变量，它的值是对应的对象。</p><p>好处是，每次使用计算对象时，不需要重复写出细节，能逐步创建名字-对象关联，采用递增的方式开发和调试程序。</p><p>解释器实现关联后又能提取这些值的存储被称为环境（environment）。</p><h3 id="组合式的求值"><a href="#组合式的求值" class="headerlink" title="组合式的求值"></a>组合式的求值</h3><p>组合式求值的规则（不能处理特殊形式（special<br>forms））：</p><ol><li>对子表达式求值</li><li>将最左子表达式的值（过程，运算符）应用于相应的实际参数，实际参数是其它子表达式的值（运算对象）</li></ol><p>这一规则的应用是递归的。可以简洁地描述嵌套的情况。可以采用树的形式表示组合式求值过程，一个带分支的节点表示某个组合式，由它出发的分支对应于组合式的运算符和运算对象，叶子节点表示基本运算符或数值，运算对象的值向上穿行。值向上穿行的求值形式是更一般的计算过程——树形积累（tree accumulation）的例子。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">*</span> (<span class="name">+</span> <span class="number">2</span> (<span class="name">*</span> <span class="number">4</span> <span class="number">6</span>))</span><br><span class="line">   (<span class="name">+</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span>))</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_1_0.png" alt="表示每个子组合式的值的树" title>                </div>                <div class="image-caption">表示每个子组合式的值的树</div>            </figure><h3 id="复合过程"><a href="#复合过程" class="headerlink" title="复合过程"></a>复合过程</h3><p>我们已经看到了lisp里的某些元素，它们必然也会出现在任何一种强大的程序设计语言里。包括：</p><ul><li>数和算术运算是基本的数据和过程。</li><li>组合式的嵌套提供了一种组织起多个操作的方法。</li><li>定义是一种受限的抽象手段，它为名字关联相应的值。</li></ul><p>过程定义为复合操作提供名字，以后可以将其作为一个单元使用。</p><h3 id="过程应用的代换模型（substitution-model）"><a href="#过程应用的代换模型（substitution-model）" class="headerlink" title="过程应用的代换模型（substitution model）"></a>过程应用的代换模型（substitution model）</h3><p>求值一个组合式，解释器完全按照上面的组合式求值的规则求值。</p><p>对于基本运算符，解释器已经做好。对于复合过程，计算过程是，用实参取代形参，对过程求值。这种计算过程被称为过程应用的代换模型。</p><p>置换的目的是为了帮助我们理解程序应用，并不是提供解译器如何真实工作的描述。典型的解译器并不通过操作程序的文本来置换形式参数的值执行程序应用。之后会介绍一系列逐渐复杂的模型来解释解译器如何工作的。</p><h4 id="应用序（applicative-order）"><a href="#应用序（applicative-order）" class="headerlink" title="应用序（applicative order）"></a>应用序（applicative order）</h4><p>先对运算符和各个运算对象求值，然后将得到的过程应用于得到的实参。</p><p>lisp采用应用序。</p><h4 id="正则序（normal-order）"><a href="#正则序（normal-order）" class="headerlink" title="正则序（normal order）"></a>正则序（normal order）</h4><p>先用运算对象表达式代换形参，直到一个只包含基本运算符的表达式，然后再求值。</p><h3 id="条件表达式和谓词（predicates）"><a href="#条件表达式和谓词（predicates）" class="headerlink" title="条件表达式和谓词（predicates）"></a>条件表达式和谓词（predicates）</h3><p>lisp有分情况分析的特殊形式。</p><p>谓词指返回真或假的过程，或求真或假的表达式。</p><h3 id="当作黑盒抽象的过程"><a href="#当作黑盒抽象的过程" class="headerlink" title="当作黑盒抽象的过程"></a>当作黑盒抽象的过程</h3><p>对于一个问题，可以自然地分解为若干子问题。分解的重要性在于每一个过程完成了一件清楚表明的工作，使它们可被用作定义其它过程的模块。模块可以看作黑箱，只关注结果，无需关注细节实现。它是一个过程抽象。</p><h2 id="过程（procedures）和他们产生的过程（processes）"><a href="#过程（procedures）和他们产生的过程（processes）" class="headerlink" title="过程（procedures）和他们产生的过程（processes）"></a>过程（procedures）和他们产生的过程（processes）</h2><p>看清不同种类的过程会产生什么计算过程，才能构造可靠的程序。</p><p>以下给出一些过程演化的典型模式。</p><h3 id="线性递归（linear-recursion）"><a href="#线性递归（linear-recursion）" class="headerlink" title="线性递归（linear recursion）"></a>线性递归（linear recursion）</h3><p>过程调用完自身（一次调用）后调用了其它过程(会被推迟执行形成链条)。</p><p>展开阶段，计算过程构造了推迟进行的操作所形成的链条。收缩阶段，运算实际执行。推迟进行需要保存和链条长度成正比的信息(有一些隐含信息)。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">factorial</span> n)</span><br><span class="line">  (<span class="name">if</span> (<span class="name">=</span> n <span class="number">1</span>)</span><br><span class="line">      <span class="number">1</span></span><br><span class="line">      (<span class="name">*</span> n (<span class="name">factorial</span> (<span class="name">-</span> n <span class="number">1</span>)))))</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_1_1.png" alt="线性递归" title>                </div>                <div class="image-caption">线性递归</div>            </figure><h3 id="线性迭代（linear-iteration）"><a href="#线性迭代（linear-iteration）" class="headerlink" title="线性迭代（linear iteration）"></a>线性迭代（linear iteration）</h3><p>过程调用完自身后没有调用其它过程，被称为尾递归（tail-recursive）。</p><p>没有展开和收缩的过程。计算过程的状态可用固定数量状态变量描述。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">factorial</span> n)</span><br><span class="line">  (<span class="name">fact-iter</span> <span class="number">1</span> <span class="number">1</span> n))</span><br><span class="line"></span><br><span class="line">(<span class="name">define</span> (<span class="name">fact-iter</span> product counter max-count)</span><br><span class="line">  (<span class="name">if</span> (<span class="name">&gt;</span> counter max-count)</span><br><span class="line">      product</span><br><span class="line">      (<span class="name">fact-iter</span> (<span class="name">*</span> counter product)</span><br><span class="line">                 (<span class="name">+</span> counter <span class="number">1</span>)</span><br><span class="line">                 max-count)))</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_1_2.png" alt="线性迭代" title>                </div>                <div class="image-caption">线性迭代</div>            </figure><p>在大部分其他语言中(比如C)，只要是语法是递归的，计算过程就是递归的，循环需要使用循环结构(for/while)实现。而lisp中，尾递归计算过程是迭代。</p><h3 id="树形递归（tree-recursion）"><a href="#树形递归（tree-recursion）" class="headerlink" title="树形递归（tree recursion）"></a>树形递归（tree recursion）</h3><p>过程调用完自身（多次调用）后调用了其它过程。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">fib</span> n)</span><br><span class="line">  (<span class="name">cond</span> ((<span class="name">=</span> n <span class="number">0</span>) <span class="number">0</span>)</span><br><span class="line">        ((<span class="name">=</span> n <span class="number">1</span>) <span class="number">1</span>)</span><br><span class="line">        (<span class="name">else</span> (<span class="name">+</span> (<span class="name">fib</span> (<span class="name">-</span> n <span class="number">1</span>))</span><br><span class="line">                 (<span class="name">fib</span> (<span class="name">-</span> n <span class="number">2</span>))))))</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_1_3.png" alt="树形递归" title>                </div>                <div class="image-caption">树形递归</div>            </figure><h3 id="增长的阶"><a href="#增长的阶" class="headerlink" title="增长的阶"></a>增长的阶</h3><p>讲了时空复杂度。。</p><p>举了很多例子。。。</p><h2 id="使用高阶过程（higher-order-procedures）制定抽象"><a href="#使用高阶过程（higher-order-procedures）制定抽象" class="headerlink" title="使用高阶过程（higher-order procedures）制定抽象"></a>使用高阶过程（higher-order procedures）制定抽象</h2><p>高阶过程是过程作为过程的参数或返回值的过程。</p><p>模式作为一个概念表达时，高阶过程是有力的抽象机制。</p><h3 id="过程作为参数（arguments）"><a href="#过程作为参数（arguments）" class="headerlink" title="过程作为参数（arguments）"></a>过程作为参数（arguments）</h3><p>比如，要实现sigma的方法（或概念？）。</p><script type="math/tex; mode=display">\sum_{n=a}^{b}f(n)=f(a)+...+f(b)</script><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">sum</span> term a next b)</span><br><span class="line">  (<span class="name">if</span> (<span class="name">&gt;</span> a b)</span><br><span class="line">      <span class="number">0</span></span><br><span class="line">      (<span class="name">+</span> (<span class="name">term</span> a)</span><br><span class="line">         (<span class="name">sum</span> term (<span class="name">next</span> a) next b))))</span><br></pre></td></tr></table></figure><h3 id="使用lambda构建过程"><a href="#使用lambda构建过程" class="headerlink" title="使用lambda构建过程"></a>使用lambda构建过程</h3><p>lambda用于生成匿名函数。用于定义一些简单的不需要名字的过程。</p><p>比如，实现积分：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">integral</span> f a b dx)</span><br><span class="line">  (<span class="name">*</span> (<span class="name">sum</span> f</span><br><span class="line">          (<span class="name">+</span> a (<span class="name">/</span> dx <span class="number">2.0</span>))</span><br><span class="line">          (<span class="name">lambda</span> (<span class="name">x</span>) (<span class="name">+</span> x dx))</span><br><span class="line">          b)</span><br><span class="line">     dx))</span><br></pre></td></tr></table></figure><h3 id="作为通用方法的过程"><a href="#作为通用方法的过程" class="headerlink" title="作为通用方法的过程"></a>作为通用方法的过程</h3><p>讲了几个例子。。。</p><h3 id="作为返回值（returned-values）的过程"><a href="#作为返回值（returned-values）的过程" class="headerlink" title="作为返回值（returned values）的过程"></a>作为返回值（returned values）的过程</h3><p>比如，表达平均阻尼的思想：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">average-damp</span> f)</span><br><span class="line">  (<span class="name">lambda</span> (<span class="name">x</span>) (<span class="name">average</span> x (<span class="name">f</span> x))))</span><br></pre></td></tr></table></figure><h3 id="抽象和第一级过程（first-class-procedures）"><a href="#抽象和第一级过程（first-class-procedures）" class="headerlink" title="抽象和第一级过程（first-class procedures）"></a>抽象和第一级过程（first-class procedures）</h3><p>程序设计语言会对计算元素可能使用方式加限制，带有最少限制的元素被称为具有第一级状态。第一级元素的某些权力或者特权包括：</p><ul><li>可以用变量命名</li><li>可以提供给过程作为参数</li><li>可以由过程作为结果返回</li><li>可以包含在数据结构中</li></ul><p>lisp给了过程完全第一级状态。</p><h1 id="ch2-使用数据构建抽象"><a href="#ch2-使用数据构建抽象" class="headerlink" title="ch2 使用数据构建抽象"></a>ch2 使用数据构建抽象</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>我们只有简单的数值数据，许多问题不够处理。因此要构造一些对象（复合数据（compound data），程序设计语言需要提供胶水（glue）以构造），以模拟复杂现象。复合数据能提高程序的模块性，提高程序设计语言的表达能力。</p><h2 id="介绍数据抽象"><a href="#介绍数据抽象" class="headerlink" title="介绍数据抽象"></a>介绍数据抽象</h2><p>数据抽象将数据的使用和实现分离。使用时主要用到选择函数（selectors）和构造函数（constructors），不需要了解实现细节。</p><h3 id="例子：有理数算术操作"><a href="#例子：有理数算术操作" class="headerlink" title="例子：有理数算术操作"></a>例子：有理数算术操作</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">make-rat</span> n d) (<span class="name">cons</span> n d))</span><br><span class="line"></span><br><span class="line">(<span class="name">define</span> (<span class="name">numer</span> x) (<span class="name">car</span> x))</span><br><span class="line"></span><br><span class="line">(<span class="name">define</span> (<span class="name">denom</span> x) (<span class="name">cdr</span> x))</span><br></pre></td></tr></table></figure><h3 id="抽象屏障（abstraction-barriers）"><a href="#抽象屏障（abstraction-barriers）" class="headerlink" title="抽象屏障（abstraction barriers）"></a>抽象屏障（abstraction barriers）</h3><p>水平线是一层抽象屏障(过程)，上面使用，下面实现。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_2_0.png" alt="抽象屏障" title>                </div>                <div class="image-caption">抽象屏障</div>            </figure><p>优点是使程序便于维护和修改。</p><h3 id="数据是什么？"><a href="#数据是什么？" class="headerlink" title="数据是什么？"></a>数据是什么？</h3><p>数据可以是过程。。。</p><p>序对（pairs）的过程性表示</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">cons</span> x y)</span><br><span class="line">  (<span class="name">define</span> (<span class="name">dispatch</span> m)</span><br><span class="line">    (<span class="name">cond</span> ((<span class="name">=</span> m <span class="number">0</span>) x)</span><br><span class="line">          ((<span class="name">=</span> m <span class="number">1</span>) y)</span><br><span class="line">          (<span class="name">else</span> (<span class="name">error</span> <span class="string">"Argument not 0 or 1 -- CONS"</span> m))))</span><br><span class="line">  dispatch)</span><br><span class="line"></span><br><span class="line">(<span class="name">define</span> (<span class="name">car</span> z) (<span class="name">z</span> <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">define</span> (<span class="name">cdr</span> z) (<span class="name">z</span> <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>说明过程可以作为对象。有关的程序设计风格被称为消息传递（message passing）。</p><h4 id="Church数"><a href="#Church数" class="headerlink" title="Church数"></a>Church数</h4><p>提到了lambda演算。。。</p><p><a href="http://cgnail.github.io/academic/lambda-index/" target="_blank" rel="noopener">一个易懂的系列文章</a></p><h2 id="层次性数据和闭包（closure）性质"><a href="#层次性数据和闭包（closure）性质" class="headerlink" title="层次性数据和闭包（closure）性质"></a>层次性数据和闭包（closure）性质</h2><p>之前构造复合数据的胶水是序对。</p><p>序对的盒子和指针表示</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">cons</span> <span class="number">1</span> <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_2_1.png" alt="盒子和指针表示" title>                </div>                <div class="image-caption">盒子和指针表示</div>            </figure><p>可以建立元素本身是序对的序对，这一性质叫做cons的闭包性质。</p><p>组合数据对象具有闭包性质是说，组合起来的数据本身可以通过同样的操作再次组合。</p><h3 id="序列的表示"><a href="#序列的表示" class="headerlink" title="序列的表示"></a>序列的表示</h3><p>数据对象的有序集被称为序列（sequence）。</p><p>通过cons嵌套形成的序列称为表（list）。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">cons</span> <span class="number">1</span></span><br><span class="line">      (<span class="name">cons</span> <span class="number">2</span></span><br><span class="line">            (<span class="name">cons</span> <span class="number">3</span></span><br><span class="line">                  (<span class="name">cons</span> <span class="number">4</span> <span class="literal">nil</span>))))</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_2_2.png" alt="盒子和指针表示" title>                </div>                <div class="image-caption">盒子和指针表示</div>            </figure><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><p>讲了有关序列的操作list-ref、length、append、map 的具体实现。</p><h3 id="层次性结构"><a href="#层次性结构" class="headerlink" title="层次性结构"></a>层次性结构</h3><p>序列的序列，也可以认为是树</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">cons</span> (<span class="name">list</span> <span class="number">1</span> <span class="number">2</span>) (<span class="name">list</span> <span class="number">3</span> <span class="number">4</span>))</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_2_3.png" alt="盒子和指针表示" title>                </div>                <div class="image-caption">盒子和指针表示</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_2_4.png" alt="树" title>                </div>                <div class="image-caption">树</div>            </figure><h3 id="序列作为约定的界面"><a href="#序列作为约定的界面" class="headerlink" title="序列作为约定的界面"></a>序列作为约定的界面</h3><p>一种强有力的设计原理。</p><h4 id="序列操作"><a href="#序列操作" class="headerlink" title="序列操作"></a>序列操作</h4><p>对于2个过程的信号流图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_2_5.png" alt="信号流图" title>                </div>                <div class="image-caption">信号流图</div>            </figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">sum-odd-squares</span> tree)</span><br><span class="line">  (<span class="name">accumulate</span> +</span><br><span class="line">              <span class="number">0</span></span><br><span class="line">              (<span class="name">map</span> square</span><br><span class="line">                   (<span class="name">filter</span> odd?</span><br><span class="line">                           (<span class="name">enumerate-tree</span> tree)))))</span><br></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">even-fibs</span> n)</span><br><span class="line">  (<span class="name">accumulate</span> cons</span><br><span class="line">              <span class="literal">nil</span></span><br><span class="line">              (<span class="name">filter</span> even?</span><br><span class="line">                      (<span class="name">map</span> fib</span><br><span class="line">                           (<span class="name">enumerate-interval</span> <span class="number">0</span> n)))))</span><br></pre></td></tr></table></figure><p>表示成序列操作能帮我们得到模块化的程序设计。</p><h2 id="符号数据"><a href="#符号数据" class="headerlink" title="符号数据"></a>符号数据</h2><p>为了扩充语言的表述能力，引进任意符号作为数据的功能。</p><h2 id="抽象数据的多重表示"><a href="#抽象数据的多重表示" class="headerlink" title="抽象数据的多重表示"></a>抽象数据的多重表示</h2><p>数据对象可能有多种表示方法。</p><p>比如复数，可以表示成直角坐标形式和极坐标形式。设计一个程序的人在数据表示的选择上不能达成一致。所以除了需要表示和使用的抽象屏障，还要隔离互不相同的设计选择的抽象屏障。需要方法以将模块组合成大型系统。</p><h3 id="复数表示"><a href="#复数表示" class="headerlink" title="复数表示"></a>复数表示</h3><p>复数的加法减法使用直角坐标更方便，乘法除法使用极坐标更方便。所以<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">add-complex</span> z1 z2)</span><br><span class="line">  (<span class="name">make-from-real-imag</span> (<span class="name">+</span> (<span class="name">real-part</span> z1) (<span class="name">real-part</span> z2))</span><br><span class="line">                       (<span class="name">+</span> (<span class="name">imag-part</span> z1) (<span class="name">imag-part</span> z2))))</span><br><span class="line">(<span class="name">define</span> (<span class="name">sub-complex</span> z1 z2)</span><br><span class="line">  (<span class="name">make-from-real-imag</span> (<span class="name">-</span> (<span class="name">real-part</span> z1) (<span class="name">real-part</span> z2))</span><br><span class="line">                       (<span class="name">-</span> (<span class="name">imag-part</span> z1) (<span class="name">imag-part</span> z2))))</span><br><span class="line">(<span class="name">define</span> (<span class="name">mul-complex</span> z1 z2)</span><br><span class="line">  (<span class="name">make-from-mag-ang</span> (<span class="name">*</span> (<span class="name">magnitude</span> z1) (<span class="name">magnitude</span> z2))</span><br><span class="line">                     (<span class="name">+</span> (<span class="name">angle</span> z1) (<span class="name">angle</span> z2))))</span><br><span class="line">(<span class="name">define</span> (<span class="name">div-complex</span> z1 z2)</span><br><span class="line">  (<span class="name">make-from-mag-ang</span> (<span class="name">/</span> (<span class="name">magnitude</span> z1) (<span class="name">magnitude</span> z2))</span><br><span class="line">                     (<span class="name">-</span> (<span class="name">angle</span> z1) (<span class="name">angle</span> z2))))</span><br></pre></td></tr></table></figure></p><p>但是复数的实现有2种<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;;直角坐标</span></span><br><span class="line"></span><br><span class="line">(<span class="name">define</span> (<span class="name">real-part</span> z) (<span class="name">car</span> z))</span><br><span class="line">(<span class="name">define</span> (<span class="name">imag-part</span> z) (<span class="name">cdr</span> z))</span><br><span class="line">(<span class="name">define</span> (<span class="name">magnitude</span> z)</span><br><span class="line">  (<span class="name">sqrt</span> (<span class="name">+</span> (<span class="name">square</span> (<span class="name">real-part</span> z)) (<span class="name">square</span> (<span class="name">imag-part</span> z)))))</span><br><span class="line">(<span class="name">define</span> (<span class="name">angle</span> z)</span><br><span class="line">  (<span class="name">atan</span> (<span class="name">imag-part</span> z) (<span class="name">real-part</span> z)))</span><br><span class="line">(<span class="name">define</span> (<span class="name">make-from-real-imag</span> x y) (<span class="name">cons</span> x y))</span><br><span class="line">(<span class="name">define</span> (<span class="name">make-from-mag-ang</span> r a) </span><br><span class="line">  (<span class="name">cons</span> (<span class="name">*</span> r (<span class="name">cos</span> a)) (<span class="name">*</span> r (<span class="name">sin</span> a))))</span><br><span class="line"></span><br><span class="line"><span class="comment">;;极坐标</span></span><br><span class="line">(<span class="name">define</span> (<span class="name">real-part</span> z)</span><br><span class="line">  (<span class="name">*</span> (<span class="name">magnitude</span> z) (<span class="name">cos</span> (<span class="name">angle</span> z))))</span><br><span class="line">(<span class="name">define</span> (<span class="name">imag-part</span> z)</span><br><span class="line">  (<span class="name">*</span> (<span class="name">magnitude</span> z) (<span class="name">sin</span> (<span class="name">angle</span> z))))</span><br><span class="line">(<span class="name">define</span> (<span class="name">magnitude</span> z) (<span class="name">car</span> z))</span><br><span class="line">(<span class="name">define</span> (<span class="name">angle</span> z) (<span class="name">cdr</span> z))</span><br><span class="line">(<span class="name">define</span> (<span class="name">make-from-real-imag</span> x y) </span><br><span class="line">  (<span class="name">cons</span> (<span class="name">sqrt</span> (<span class="name">+</span> (<span class="name">square</span> x) (<span class="name">square</span> y)))</span><br><span class="line">        (<span class="name">atan</span> y x)))</span><br><span class="line">(<span class="name">define</span> (<span class="name">make-from-mag-ang</span> r a) (<span class="name">cons</span> r a))</span><br></pre></td></tr></table></figure></p><h3 id="带标志数据"><a href="#带标志数据" class="headerlink" title="带标志数据"></a>带标志数据</h3><p>最小允诺原则（principle of least commitment）:由选择函数和构造函数形成的抽象屏障，把选择数据的具体表示形式的事情向后延迟。<br>在同一个系统中若要有多种表示方式，需要使用类型标志以区分。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">attach-tag</span> type-tag contents)</span><br><span class="line">  (<span class="name">cons</span> type-tag contents))</span><br><span class="line">(<span class="name">define</span> (<span class="name">type-tag</span> datum)</span><br><span class="line">  (<span class="name">if</span> (<span class="name">pair</span>? datum)</span><br><span class="line">      (<span class="name">car</span> datum)</span><br><span class="line">      (<span class="name">error</span> <span class="string">"Bad tagged datum -- TYPE-TAG"</span> datum)))</span><br><span class="line">(<span class="name">define</span> (<span class="name">contents</span> datum)</span><br><span class="line">  (<span class="name">if</span> (<span class="name">pair</span>? datum)</span><br><span class="line">      (<span class="name">cdr</span> datum)</span><br><span class="line">      (<span class="name">error</span> <span class="string">"Bad tagged datum -- CONTENTS"</span> datum)))</span><br></pre></td></tr></table></figure><p>以此区分↓<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">rectangular</span>? z)</span><br><span class="line">  (<span class="name">eq</span>? (<span class="name">type-tag</span> z) 'rectangular))</span><br><span class="line">(<span class="name">define</span> (<span class="name">polar</span>? z)</span><br><span class="line">  (<span class="name">eq</span>? (<span class="name">type-tag</span> z) 'polar))</span><br></pre></td></tr></table></figure></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;;直角坐标表示的修改版</span></span><br><span class="line"></span><br><span class="line">(<span class="name">define</span> (<span class="name">real-part-rectangular</span> z) (<span class="name">car</span> z))</span><br><span class="line">(<span class="name">define</span> (<span class="name">imag-part-rectangular</span> z) (<span class="name">cdr</span> z))</span><br><span class="line">(<span class="name">define</span> (<span class="name">magnitude-rectangular</span> z)</span><br><span class="line">  (<span class="name">sqrt</span> (<span class="name">+</span> (<span class="name">square</span> (<span class="name">real-part-rectangular</span> z))</span><br><span class="line">           (<span class="name">square</span> (<span class="name">imag-part-rectangular</span> z)))))</span><br><span class="line">(<span class="name">define</span> (<span class="name">angle-rectangular</span> z)</span><br><span class="line">  (<span class="name">atan</span> (<span class="name">imag-part-rectangular</span> z)</span><br><span class="line">        (<span class="name">real-part-rectangular</span> z)))</span><br><span class="line">(<span class="name">define</span> (<span class="name">make-from-real-imag-rectangular</span> x y)</span><br><span class="line">  (<span class="name">attach-tag</span> 'rectangular (<span class="name">cons</span> x y)))</span><br><span class="line">(<span class="name">define</span> (<span class="name">make-from-mag-ang-rectangular</span> r a) </span><br><span class="line">  (<span class="name">attach-tag</span> 'rectangular</span><br><span class="line">              (<span class="name">cons</span> (<span class="name">*</span> r (<span class="name">cos</span> a)) (<span class="name">*</span> r (<span class="name">sin</span> a)))))</span><br><span class="line"></span><br><span class="line"><span class="comment">;;极坐标表示的修改版</span></span><br><span class="line">(<span class="name">define</span> (<span class="name">real-part-polar</span> z)</span><br><span class="line">  (<span class="name">*</span> (<span class="name">magnitude-polar</span> z) (<span class="name">cos</span> (<span class="name">angle-polar</span> z))))</span><br><span class="line">(<span class="name">define</span> (<span class="name">imag-part-polar</span> z)</span><br><span class="line">  (<span class="name">*</span> (<span class="name">magnitude-polar</span> z) (<span class="name">sin</span> (<span class="name">angle-polar</span> z))))</span><br><span class="line">(<span class="name">define</span> (<span class="name">magnitude-polar</span> z) (<span class="name">car</span> z))</span><br><span class="line">(<span class="name">define</span> (<span class="name">angle-polar</span> z) (<span class="name">cdr</span> z))</span><br><span class="line">(<span class="name">define</span> (<span class="name">make-from-real-imag-polar</span> x y) </span><br><span class="line">  (<span class="name">attach-tag</span> 'polar</span><br><span class="line">               (<span class="name">cons</span> (<span class="name">sqrt</span> (<span class="name">+</span> (<span class="name">square</span> x) (<span class="name">square</span> y)))</span><br><span class="line">                     (<span class="name">atan</span> y x))))</span><br><span class="line">(<span class="name">define</span> (<span class="name">make-from-mag-ang-polar</span> r a)</span><br><span class="line">  (<span class="name">attach-tag</span> 'polar (<span class="name">cons</span> r a)))</span><br></pre></td></tr></table></figure><p>通用型选择函数实现这样的过程，检查参数的标志，然后调用相应过程<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">real-part</span> z)</span><br><span class="line">  (<span class="name">cond</span> ((<span class="name">rectangular</span>? z) </span><br><span class="line">         (<span class="name">real-part-rectangular</span> (<span class="name">contents</span> z)))</span><br><span class="line">        ((<span class="name">polar</span>? z)</span><br><span class="line">         (<span class="name">real-part-polar</span> (<span class="name">contents</span> z)))</span><br><span class="line">        (<span class="name">else</span> (<span class="name">error</span> <span class="string">"Unknown type -- REAL-PART"</span> z))))</span><br><span class="line">(<span class="name">define</span> (<span class="name">imag-part</span> z)</span><br><span class="line">  (<span class="name">cond</span> ((<span class="name">rectangular</span>? z)</span><br><span class="line">         (<span class="name">imag-part-rectangular</span> (<span class="name">contents</span> z)))</span><br><span class="line">        ((<span class="name">polar</span>? z)</span><br><span class="line">         (<span class="name">imag-part-polar</span> (<span class="name">contents</span> z)))</span><br><span class="line">        (<span class="name">else</span> (<span class="name">error</span> <span class="string">"Unknown type -- IMAG-PART"</span> z))))</span><br><span class="line">(<span class="name">define</span> (<span class="name">magnitude</span> z)</span><br><span class="line">  (<span class="name">cond</span> ((<span class="name">rectangular</span>? z)</span><br><span class="line">         (<span class="name">magnitude-rectangular</span> (<span class="name">contents</span> z)))</span><br><span class="line">        ((<span class="name">polar</span>? z)</span><br><span class="line">         (<span class="name">magnitude-polar</span> (<span class="name">contents</span> z)))</span><br><span class="line">        (<span class="name">else</span> (<span class="name">error</span> <span class="string">"Unknown type -- MAGNITUDE"</span> z))))</span><br><span class="line">(<span class="name">define</span> (<span class="name">angle</span> z)</span><br><span class="line">  (<span class="name">cond</span> ((<span class="name">rectangular</span>? z)</span><br><span class="line">         (<span class="name">angle-rectangular</span> (<span class="name">contents</span> z)))</span><br><span class="line">        ((<span class="name">polar</span>? z)</span><br><span class="line">         (<span class="name">angle-polar</span> (<span class="name">contents</span> z)))</span><br><span class="line">        (<span class="name">else</span> (<span class="name">error</span> <span class="string">"Unknown type -- ANGLE"</span> z))))</span><br></pre></td></tr></table></figure></p><p>构造函数<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">make-from-real-imag</span> x y)</span><br><span class="line">  (<span class="name">make-from-real-imag-rectangular</span> x y))</span><br><span class="line">(<span class="name">define</span> (<span class="name">make-from-mag-ang</span> r a)</span><br><span class="line">  (<span class="name">make-from-mag-ang-polar</span> r a))</span><br></pre></td></tr></table></figure></p><p>于是运算的过程不需要做修改</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_2_6.png" alt="通用复数运算系统结构" title>                </div>                <div class="image-caption">通用复数运算系统结构</div>            </figure><h3 id="数据导向（data-directed）程序设计和可加性"><a href="#数据导向（data-directed）程序设计和可加性" class="headerlink" title="数据导向（data-directed）程序设计和可加性"></a>数据导向（data-directed）程序设计和可加性</h3><p>检查数据项的类型以此调用某个适当过程叫做基于类型的分派。优点是有模块性。缺点，一是通用型界面过程必须知道所有不同的表示，增加一个类型时必须对所有通用型界面过程增加子句以检查新类型，二是独立设计时需要保证加到系统时不会出现名字相同的过程。</p><p>以上通用型界面技术不具有可加性。大型系统需要解决这个问题。</p><p>一种称为数据导向的程序设计编程技术解决了这个问题。</p><p>需要一个表格</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_2_7.png" alt="表格" title>                </div>                <div class="image-caption">表格</div>            </figure><p>需要2个对操作-类型表进行操作的过程<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;;安装</span></span><br><span class="line">(<span class="name">put</span> &lt;op&gt; &lt;type&gt; &lt;item&gt;)</span><br><span class="line"></span><br><span class="line"><span class="comment">;;查找获取</span></span><br><span class="line">(<span class="name">get</span> &lt;op&gt; &lt;type&gt;)</span><br></pre></td></tr></table></figure></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;;直角坐标表示</span></span><br><span class="line">(<span class="name">define</span> (<span class="name">install-rectangular-package</span>)</span><br><span class="line">  <span class="comment">;; internal procedures</span></span><br><span class="line">  (<span class="name">define</span> (<span class="name">real-part</span> z) (<span class="name">car</span> z))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">imag-part</span> z) (<span class="name">cdr</span> z))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">make-from-real-imag</span> x y) (<span class="name">cons</span> x y))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">magnitude</span> z)</span><br><span class="line">    (<span class="name">sqrt</span> (<span class="name">+</span> (<span class="name">square</span> (<span class="name">real-part</span> z))</span><br><span class="line">             (<span class="name">square</span> (<span class="name">imag-part</span> z)))))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">angle</span> z)</span><br><span class="line">    (<span class="name">atan</span> (<span class="name">imag-part</span> z) (<span class="name">real-part</span> z)))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">make-from-mag-ang</span> r a) </span><br><span class="line">    (<span class="name">cons</span> (<span class="name">*</span> r (<span class="name">cos</span> a)) (<span class="name">*</span> r (<span class="name">sin</span> a))))</span><br><span class="line">  <span class="comment">;; interface to the rest of the system</span></span><br><span class="line">  (<span class="name">define</span> (<span class="name">tag</span> x) (<span class="name">attach-tag</span> 'rectangular x))</span><br><span class="line">  (<span class="name">put</span> 'real-part '(rectangular) real-part)</span><br><span class="line">  (<span class="name">put</span> 'imag-part '(rectangular) imag-part)</span><br><span class="line">  (<span class="name">put</span> 'magnitude '(rectangular) magnitude)</span><br><span class="line">  (<span class="name">put</span> 'angle '(rectangular) angle)</span><br><span class="line">  (<span class="name">put</span> 'make-from-real-imag 'rectangular </span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">x</span> y) (<span class="name">tag</span> (<span class="name">make-from-real-imag</span> x y))))</span><br><span class="line">  (<span class="name">put</span> 'make-from-mag-ang 'rectangular </span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">r</span> a) (<span class="name">tag</span> (<span class="name">make-from-mag-ang</span> r a))))</span><br><span class="line">  'done)</span><br><span class="line"><span class="comment">;;极坐标同理</span></span><br><span class="line">(<span class="name">define</span> (<span class="name">install-polar-package</span>)</span><br><span class="line">  <span class="comment">;; internal procedures</span></span><br><span class="line">  (<span class="name">define</span> (<span class="name">magnitude</span> z) (<span class="name">car</span> z))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">angle</span> z) (<span class="name">cdr</span> z))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">make-from-mag-ang</span> r a) (<span class="name">cons</span> r a))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">real-part</span> z)</span><br><span class="line">    (<span class="name">*</span> (<span class="name">magnitude</span> z) (<span class="name">cos</span> (<span class="name">angle</span> z))))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">imag-part</span> z)</span><br><span class="line">    (<span class="name">*</span> (<span class="name">magnitude</span> z) (<span class="name">sin</span> (<span class="name">angle</span> z))))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">make-from-real-imag</span> x y) </span><br><span class="line">    (<span class="name">cons</span> (<span class="name">sqrt</span> (<span class="name">+</span> (<span class="name">square</span> x) (<span class="name">square</span> y)))</span><br><span class="line">          (<span class="name">atan</span> y x)))</span><br><span class="line">  <span class="comment">;; interface to the rest of the system</span></span><br><span class="line">  (<span class="name">define</span> (<span class="name">tag</span> x) (<span class="name">attach-tag</span> 'polar x))</span><br><span class="line">  (<span class="name">put</span> 'real-part '(polar) real-part)</span><br><span class="line">  (<span class="name">put</span> 'imag-part '(polar) imag-part)</span><br><span class="line">  (<span class="name">put</span> 'magnitude '(polar) magnitude)</span><br><span class="line">  (<span class="name">put</span> 'angle '(polar) angle)</span><br><span class="line">  (<span class="name">put</span> 'make-from-real-imag 'polar</span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">x</span> y) (<span class="name">tag</span> (<span class="name">make-from-real-imag</span> x y))))</span><br><span class="line">  (<span class="name">put</span> 'make-from-mag-ang 'polar </span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">r</span> a) (<span class="name">tag</span> (<span class="name">make-from-mag-ang</span> r a))))</span><br><span class="line">  'done)</span><br></pre></td></tr></table></figure><p>通过这个过程访问表<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">apply-generic</span> op . args)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">type-tags</span> (<span class="name">map</span> type-tag args)))</span><br><span class="line">    (<span class="name">let</span> ((<span class="name">proc</span> (<span class="name">get</span> op type-tags)))</span><br><span class="line">      (<span class="name">if</span> proc</span><br><span class="line">          (<span class="name">apply</span> proc (<span class="name">map</span> contents args))</span><br><span class="line">          (<span class="name">error</span></span><br><span class="line">            <span class="string">"No method for these types -- APPLY-GENERIC"</span></span><br><span class="line">            (<span class="name">list</span> op type-tags))))))</span><br></pre></td></tr></table></figure></p><p>定义通用型选择函数<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">real-part</span> z) (<span class="name">apply-generic</span> 'real-part z))</span><br><span class="line">(<span class="name">define</span> (<span class="name">imag-part</span> z) (<span class="name">apply-generic</span> 'imag-part z))</span><br><span class="line">(<span class="name">define</span> (<span class="name">magnitude</span> z) (<span class="name">apply-generic</span> 'magnitude z))</span><br><span class="line">(<span class="name">define</span> (<span class="name">angle</span> z) (<span class="name">apply-generic</span> 'angle z))</span><br></pre></td></tr></table></figure></p><p>定义构造函数<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">make-from-real-imag</span> x y)</span><br><span class="line">  ((<span class="name">get</span> 'make-from-real-imag 'rectangular) x y))</span><br><span class="line">(<span class="name">define</span> (<span class="name">make-from-mag-ang</span> r a)</span><br><span class="line">  ((<span class="name">get</span> 'make-from-mag-ang 'polar) r a))</span><br></pre></td></tr></table></figure></p><h3 id="消息传递（message-passing）"><a href="#消息传递（message-passing）" class="headerlink" title="消息传递（message passing）"></a>消息传递（message passing）</h3><p>将表按列分解，不采用智能操作，而是采用智能数据对象。数据对象作为一个过程，以操作的名字作为参数，执行指定操作。</p><p>例子<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">make-from-real-imag</span> x y)</span><br><span class="line">  (<span class="name">define</span> (<span class="name">dispatch</span> op)</span><br><span class="line">    (<span class="name">cond</span> ((<span class="name">eq</span>? op 'real-part) x)</span><br><span class="line">          ((<span class="name">eq</span>? op 'imag-part) y)</span><br><span class="line">          ((<span class="name">eq</span>? op 'magnitude)</span><br><span class="line">           (<span class="name">sqrt</span> (<span class="name">+</span> (<span class="name">square</span> x) (<span class="name">square</span> y))))</span><br><span class="line">          ((<span class="name">eq</span>? op 'angle) (<span class="name">atan</span> y x))</span><br><span class="line">          (<span class="name">else</span></span><br><span class="line">           (<span class="name">error</span> <span class="string">"Unknown op -- MAKE-FROM-REAL-IMAG"</span> op))))</span><br><span class="line">  dispatch)</span><br></pre></td></tr></table></figure></p><p>这个改成这个<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">apply-generic</span> op arg) (<span class="name">arg</span> op))</span><br></pre></td></tr></table></figure></p><h2 id="带有通用型操作的系统"><a href="#带有通用型操作的系统" class="headerlink" title="带有通用型操作的系统"></a>带有通用型操作的系统</h2><p>使用数据导向构造一个算数运算包，系统具有可加性。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_2_8.png" alt="算术运算包" title>                </div>                <div class="image-caption">算术运算包</div>            </figure><h3 id="通用算术过程"><a href="#通用算术过程" class="headerlink" title="通用算术过程"></a>通用算术过程</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">add</span> x y) (<span class="name">apply-generic</span> 'add x y))</span><br><span class="line">(<span class="name">define</span> (<span class="name">sub</span> x y) (<span class="name">apply-generic</span> 'sub x y))</span><br><span class="line">(<span class="name">define</span> (<span class="name">mul</span> x y) (<span class="name">apply-generic</span> 'mul x y))</span><br><span class="line">(<span class="name">define</span> (<span class="name">div</span> x y) (<span class="name">apply-generic</span> 'div x y))</span><br><span class="line"></span><br><span class="line"><span class="comment">;;scheme数字</span></span><br><span class="line">(<span class="name">define</span> (<span class="name">install-scheme-number-package</span>)</span><br><span class="line">  (<span class="name">define</span> (<span class="name">tag</span> x)</span><br><span class="line">    (<span class="name">attach-tag</span> 'scheme-number x))    </span><br><span class="line">  (<span class="name">put</span> 'add '(scheme-number scheme-number)</span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">x</span> y) (<span class="name">tag</span> (<span class="name">+</span> x y))))</span><br><span class="line">  (<span class="name">put</span> 'sub '(scheme-number scheme-number)</span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">x</span> y) (<span class="name">tag</span> (<span class="name">-</span> x y))))</span><br><span class="line">  (<span class="name">put</span> 'mul '(scheme-number scheme-number)</span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">x</span> y) (<span class="name">tag</span> (<span class="name">*</span> x y))))</span><br><span class="line">  (<span class="name">put</span> 'div '(scheme-number scheme-number)</span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">x</span> y) (<span class="name">tag</span> (<span class="name">/</span> x y))))</span><br><span class="line">  (<span class="name">put</span> 'make 'scheme-number</span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">x</span>) (<span class="name">tag</span> x)))</span><br><span class="line">  'done)</span><br><span class="line"></span><br><span class="line"><span class="comment">;;构造函数</span></span><br><span class="line">(<span class="name">define</span> (<span class="name">make-scheme-number</span> n)</span><br><span class="line">  ((<span class="name">get</span> 'make 'scheme-number) n))</span><br><span class="line"></span><br><span class="line"><span class="comment">;;有理数</span></span><br><span class="line">(<span class="name">define</span> (<span class="name">install-rational-package</span>)</span><br><span class="line">  <span class="comment">;; internal procedures</span></span><br><span class="line">  (<span class="name">define</span> (<span class="name">numer</span> x) (<span class="name">car</span> x))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">denom</span> x) (<span class="name">cdr</span> x))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">make-rat</span> n d)</span><br><span class="line">    (<span class="name">let</span> ((<span class="name">g</span> (<span class="name">gcd</span> n d)))</span><br><span class="line">      (<span class="name">cons</span> (<span class="name">/</span> n g) (<span class="name">/</span> d g))))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">add-rat</span> x y)</span><br><span class="line">    (<span class="name">make-rat</span> (<span class="name">+</span> (<span class="name">*</span> (<span class="name">numer</span> x) (<span class="name">denom</span> y))</span><br><span class="line">                 (<span class="name">*</span> (<span class="name">numer</span> y) (<span class="name">denom</span> x)))</span><br><span class="line">              (<span class="name">*</span> (<span class="name">denom</span> x) (<span class="name">denom</span> y))))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">sub-rat</span> x y)</span><br><span class="line">    (<span class="name">make-rat</span> (<span class="name">-</span> (<span class="name">*</span> (<span class="name">numer</span> x) (<span class="name">denom</span> y))</span><br><span class="line">                 (<span class="name">*</span> (<span class="name">numer</span> y) (<span class="name">denom</span> x)))</span><br><span class="line">              (<span class="name">*</span> (<span class="name">denom</span> x) (<span class="name">denom</span> y))))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">mul-rat</span> x y)</span><br><span class="line">    (<span class="name">make-rat</span> (<span class="name">*</span> (<span class="name">numer</span> x) (<span class="name">numer</span> y))</span><br><span class="line">              (<span class="name">*</span> (<span class="name">denom</span> x) (<span class="name">denom</span> y))))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">div-rat</span> x y)</span><br><span class="line">    (<span class="name">make-rat</span> (<span class="name">*</span> (<span class="name">numer</span> x) (<span class="name">denom</span> y))</span><br><span class="line">              (<span class="name">*</span> (<span class="name">denom</span> x) (<span class="name">numer</span> y))))</span><br><span class="line">  <span class="comment">;; interface to rest of the system</span></span><br><span class="line">  (<span class="name">define</span> (<span class="name">tag</span> x) (<span class="name">attach-tag</span> 'rational x))</span><br><span class="line">  (<span class="name">put</span> 'add '(rational rational)</span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">x</span> y) (<span class="name">tag</span> (<span class="name">add-rat</span> x y))))</span><br><span class="line">  (<span class="name">put</span> 'sub '(rational rational)</span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">x</span> y) (<span class="name">tag</span> (<span class="name">sub-rat</span> x y))))</span><br><span class="line">  (<span class="name">put</span> 'mul '(rational rational)</span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">x</span> y) (<span class="name">tag</span> (<span class="name">mul-rat</span> x y))))</span><br><span class="line">  (<span class="name">put</span> 'div '(rational rational)</span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">x</span> y) (<span class="name">tag</span> (<span class="name">div-rat</span> x y))))</span><br><span class="line"></span><br><span class="line">  (<span class="name">put</span> 'make 'rational</span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">n</span> d) (<span class="name">tag</span> (<span class="name">make-rat</span> n d))))</span><br><span class="line">  'done)</span><br><span class="line">(<span class="name">define</span> (<span class="name">make-rational</span> n d)</span><br><span class="line">  ((<span class="name">get</span> 'make 'rational) n d))</span><br><span class="line"></span><br><span class="line"><span class="comment">;;复数</span></span><br><span class="line">(<span class="name">define</span> (<span class="name">install-complex-package</span>)</span><br><span class="line">  <span class="comment">;; imported procedures from rectangular and polar packages</span></span><br><span class="line">  (<span class="name">define</span> (<span class="name">make-from-real-imag</span> x y)</span><br><span class="line">    ((<span class="name">get</span> 'make-from-real-imag 'rectangular) x y))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">make-from-mag-ang</span> r a)</span><br><span class="line">    ((<span class="name">get</span> 'make-from-mag-ang 'polar) r a))</span><br><span class="line">  <span class="comment">;; internal procedures</span></span><br><span class="line">  (<span class="name">define</span> (<span class="name">add-complex</span> z1 z2)</span><br><span class="line">    (<span class="name">make-from-real-imag</span> (<span class="name">+</span> (<span class="name">real-part</span> z1) (<span class="name">real-part</span> z2))</span><br><span class="line">                         (<span class="name">+</span> (<span class="name">imag-part</span> z1) (<span class="name">imag-part</span> z2))))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">sub-complex</span> z1 z2)</span><br><span class="line">    (<span class="name">make-from-real-imag</span> (<span class="name">-</span> (<span class="name">real-part</span> z1) (<span class="name">real-part</span> z2))</span><br><span class="line">                         (<span class="name">-</span> (<span class="name">imag-part</span> z1) (<span class="name">imag-part</span> z2))))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">mul-complex</span> z1 z2)</span><br><span class="line">    (<span class="name">make-from-mag-ang</span> (<span class="name">*</span> (<span class="name">magnitude</span> z1) (<span class="name">magnitude</span> z2))</span><br><span class="line">                       (<span class="name">+</span> (<span class="name">angle</span> z1) (<span class="name">angle</span> z2))))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">div-complex</span> z1 z2)</span><br><span class="line">    (<span class="name">make-from-mag-ang</span> (<span class="name">/</span> (<span class="name">magnitude</span> z1) (<span class="name">magnitude</span> z2))</span><br><span class="line">                       (<span class="name">-</span> (<span class="name">angle</span> z1) (<span class="name">angle</span> z2))))</span><br><span class="line">  <span class="comment">;; interface to rest of the system</span></span><br><span class="line">  (<span class="name">define</span> (<span class="name">tag</span> z) (<span class="name">attach-tag</span> 'complex z))</span><br><span class="line">  (<span class="name">put</span> 'add '(complex complex)</span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">z1</span> z2) (<span class="name">tag</span> (<span class="name">add-complex</span> z1 z2))))</span><br><span class="line">  (<span class="name">put</span> 'sub '(complex complex)</span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">z1</span> z2) (<span class="name">tag</span> (<span class="name">sub-complex</span> z1 z2))))</span><br><span class="line">  (<span class="name">put</span> 'mul '(complex complex)</span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">z1</span> z2) (<span class="name">tag</span> (<span class="name">mul-complex</span> z1 z2))))</span><br><span class="line">  (<span class="name">put</span> 'div '(complex complex)</span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">z1</span> z2) (<span class="name">tag</span> (<span class="name">div-complex</span> z1 z2))))</span><br><span class="line">  (<span class="name">put</span> 'make-from-real-imag 'complex</span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">x</span> y) (<span class="name">tag</span> (<span class="name">make-from-real-imag</span> x y))))</span><br><span class="line">  (<span class="name">put</span> 'make-from-mag-ang 'complex</span><br><span class="line">       (<span class="name">lambda</span> (<span class="name">r</span> a) (<span class="name">tag</span> (<span class="name">make-from-mag-ang</span> r a))))</span><br><span class="line">  'done)</span><br><span class="line"></span><br><span class="line"><span class="comment">;;构造函数</span></span><br><span class="line">(<span class="name">define</span> (<span class="name">make-complex-from-real-imag</span> x y)</span><br><span class="line">  ((<span class="name">get</span> 'make-from-real-imag 'complex) x y))</span><br><span class="line">(<span class="name">define</span> (<span class="name">make-complex-from-mag-ang</span> r a)</span><br><span class="line">  ((<span class="name">get</span> 'make-from-mag-ang 'complex) r a))</span><br></pre></td></tr></table></figure><h3 id="不同类型数据组合"><a href="#不同类型数据组合" class="headerlink" title="不同类型数据组合"></a>不同类型数据组合</h3><p>以上没有定义不同类型数据之间的运算。</p><p>一种方便的解决方案是强制(coercion)。</p><p>定义强制过程<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">scheme-number-&gt;complex</span> n)</span><br><span class="line">  (<span class="name">make-complex-from-real-imag</span> (<span class="name">contents</span> n) <span class="number">0</span>))</span><br></pre></td></tr></table></figure></p><p>安装到强制表<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">put-coercion</span> 'scheme-number 'complex scheme-number-&gt;complex)</span><br></pre></td></tr></table></figure></p><p>修改这个过程<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">apply-generic</span> op . args)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">type-tags</span> (<span class="name">map</span> type-tag args)))</span><br><span class="line">    (<span class="name">let</span> ((<span class="name">proc</span> (<span class="name">get</span> op type-tags)))</span><br><span class="line">      (<span class="name">if</span> proc</span><br><span class="line">          (<span class="name">apply</span> proc (<span class="name">map</span> contents args))</span><br><span class="line">          (<span class="name">if</span> (<span class="name">=</span> (<span class="name">length</span> args) <span class="number">2</span>)</span><br><span class="line">              (<span class="name">let</span> ((<span class="name">type1</span> (<span class="name">car</span> type-tags))</span><br><span class="line">                    (<span class="name">type2</span> (<span class="name">cadr</span> type-tags))</span><br><span class="line">                    (<span class="name">a1</span> (<span class="name">car</span> args))</span><br><span class="line">                    (<span class="name">a2</span> (<span class="name">cadr</span> args)))</span><br><span class="line">                (<span class="name">let</span> ((<span class="name">t1-&gt;t2</span> (<span class="name">get-coercion</span> type1 type2))</span><br><span class="line">                      (<span class="name">t2-&gt;t1</span> (<span class="name">get-coercion</span> type2 type1)))</span><br><span class="line">                  (<span class="name">cond</span> (<span class="name">t1-&gt;t2</span></span><br><span class="line">                         (<span class="name">apply-generic</span> op (<span class="name">t1-&gt;t2</span> a1) a2))</span><br><span class="line">                        (<span class="name">t2-&gt;t1</span></span><br><span class="line">                         (<span class="name">apply-generic</span> op a1 (<span class="name">t2-&gt;t1</span> a2)))</span><br><span class="line">                        (<span class="name">else</span></span><br><span class="line">                         (<span class="name">error</span> <span class="string">"No method for these types"</span></span><br><span class="line">                                (<span class="name">list</span> op type-tags))))))</span><br><span class="line">              (<span class="name">error</span> <span class="string">"No method for these types"</span></span><br><span class="line">                     (<span class="name">list</span> op type-tags)))))))</span><br></pre></td></tr></table></figure></p><h4 id="类型的层次结构"><a href="#类型的层次结构" class="headerlink" title="类型的层次结构"></a>类型的层次结构</h4><p>在实际中，还存在着不同类型相互关系更全局性的结构。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_2_9.png" alt="塔结构" title>                </div>                <div class="image-caption">塔结构</div>            </figure><p>这被称为塔结构。优点是简化了新类型的加入，加入时只需要知道如何连接上面的超类型，以及如何作为下面的超类型，强制转化时只需逐层上升。并且实现了继承的概念，能够继承超类型的所有操作。另一个优点是，下降它可以使它到达最简单的表达形式。</p><h4 id="层次结构的不足"><a href="#层次结构的不足" class="headerlink" title="层次结构的不足"></a>层次结构的不足</h4><p>遗憾的是，事情通常不是这样。一个类型有可能有多个子类型，也有可能有多个超类型。这是当时在研究的领域。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_2_10.png" alt="图形的关系" title>                </div>                <div class="image-caption">图形的关系</div>            </figure><h1 id="ch3-模块化，对象和状态"><a href="#ch3-模块化，对象和状态" class="headerlink" title="ch3 模块化，对象和状态"></a>ch3 模块化，对象和状态</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>前面讲了将过程和数据组合起来构造复合实体，在克服大型系统复杂性问题，抽象有重要作用。但是对于设计程序而言，这些手段不够用，还需要组织原则，系统化完成系统的整体设计。</p><p>基于被模拟系统的结构去设计程序的结构，是一种强有力的设计策略。且希望扩充时不必做全面修改。</p><p>以下研究2种特点鲜明的设计策略，源自于对系统结构的2种世界观。第一种关注对象，可能随时间变化。另一种关注流过系统的信息流，像信号处理系统。</p><h2 id="赋值（assignment）和局部状态"><a href="#赋值（assignment）和局部状态" class="headerlink" title="赋值（assignment）和局部状态"></a>赋值（assignment）和局部状态</h2><p>对象具有随时间变化的状态，对象可能通过交互影响其它对象的状态。因为状态会改变，语言必须提供一个赋值运算符。</p><p>例子<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">make-account</span> balance)</span><br><span class="line">  (<span class="name">define</span> (<span class="name">withdraw</span> amount)</span><br><span class="line">    (<span class="name">if</span> (<span class="name">&gt;=</span> balance amount)</span><br><span class="line">        (<span class="name">begin</span> (<span class="name">set!</span> balance (<span class="name">-</span> balance amount))</span><br><span class="line">               balance)</span><br><span class="line">        <span class="string">"Insufficient funds"</span>))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">deposit</span> amount)</span><br><span class="line">    (<span class="name">set!</span> balance (<span class="name">+</span> balance amount))</span><br><span class="line">    balance)</span><br><span class="line">  (<span class="name">define</span> (<span class="name">dispatch</span> m)</span><br><span class="line">    (<span class="name">cond</span> ((<span class="name">eq</span>? m 'withdraw) withdraw)</span><br><span class="line">          ((<span class="name">eq</span>? m 'deposit) deposit)</span><br><span class="line">          (<span class="name">else</span> (<span class="name">error</span> <span class="string">"Unknown request -- MAKE-ACCOUNT"</span></span><br><span class="line">                       m))))</span><br><span class="line">  dispatch)</span><br></pre></td></tr></table></figure></p><h3 id="引进赋值带来的利益"><a href="#引进赋值带来的利益" class="headerlink" title="引进赋值带来的利益"></a>引进赋值带来的利益</h3><p>不用赋值：</p><p>x2 = (rand-update x1)</p><p>x3 = (rand-update x2)</p><p>使用赋值：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> rand</span><br><span class="line"> (<span class="name">let</span> ((<span class="name">x</span> random-init))</span><br><span class="line">   (<span class="name">lambda</span> ()</span><br><span class="line">     (<span class="name">set!</span> x (<span class="name">rand-update</span> x))</span><br><span class="line">     x)))</span><br></pre></td></tr></table></figure></p><p>与所有状态都必须显式地操作和传递额外参数的方式相比，通过引入赋值和将状态隐藏在局部变量中的技术，我们能以一种更模块化的方式构造系统。</p><h3 id="引进赋值的代价"><a href="#引进赋值的代价" class="headerlink" title="引进赋值的代价"></a>引进赋值的代价</h3><p>一旦在语言里引进了赋值，代换就不再适合作为过程应用的模型了。</p><p>不使用赋值的程序设计叫函数式编程（functional programming）。使用赋值的程序设计叫命令式编程（imperative programming）。</p><p>引入赋值，一个变量不是一个简单的名字，而是索引一个保存值的位置，位置上的值可变。</p><h4 id="同一和变化"><a href="#同一和变化" class="headerlink" title="同一和变化"></a>同一和变化</h4><p>如果一个语言在表达式里支持“同一的东西可以相互替换”的概念，这样替换不会改变表达式的值，这个语言就称为是具有引用透明性（referentially transparent）。</p><p>在我们的计算机语言包含了赋值操作之后，也就打破了引用透明性。</p><h4 id="命令式程序设计的缺陷"><a href="#命令式程序设计的缺陷" class="headerlink" title="命令式程序设计的缺陷"></a>命令式程序设计的缺陷</h4><p>命令式编程中赋值可能要有相对顺序才是正确的(若有多个并发执行的程序，复杂性会糟糕)，函数式编程不需要考虑顺序。</p><h2 id="求值的环境模型（environment-model）"><a href="#求值的环境模型（environment-model）" class="headerlink" title="求值的环境模型（environment model）"></a>求值的环境模型（environment model）</h2><p>引入赋值，一个变量不是一个简单的名字，而是索引一个保存值的位置。在新的求值模型中，位置维持在称为环境的结构中。</p><p>环境是框架的一个序列（frame）。框架是包含约束的表格，约束将一些变量名字关联于对应的值。每个框架有一个指针，指向框架的外围环境。如果框架是全局的，它将没有外围环境。一个变量相对于某个特定环境的值，是在这一环境中，包含着该变量的第一个框架里的约束值。若不存在，则说这个变量在该特定环境无约束。</p><p>如图，A、B、C、D是环境，Ⅰ、Ⅱ、Ⅲ是框架，框架中是约束。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_3_0.png" alt="环境模型" title>                </div>                <div class="image-caption">环境模型</div>            </figure><h3 id="求值规则"><a href="#求值规则" class="headerlink" title="求值规则"></a>求值规则</h3><p>关于解释器如何求值一个组合式的问题，其整体描述仍然与第一次介绍时完全一样。<br>如果要对一个组合表达式求值：</p><ol><li>求值这一组合式里的各个子表达式。</li><li>将运算符子表达式的值应用于运算对象子表达式的值。</li></ol><p>现在我们要用求值的环境模型代替求值的代换模型。</p><h4 id="创建过程"><a href="#创建过程" class="headerlink" title="创建过程"></a>创建过程</h4><p>一个过程是一些代码和一个指针的序对。</p><p>例如</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">square</span> x)</span><br><span class="line">  (<span class="name">*</span> x x))</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_3_1.png" alt="环境模型" title>                </div>                <div class="image-caption">环境模型</div>            </figure><h4 id="应用过程"><a href="#应用过程" class="headerlink" title="应用过程"></a>应用过程</h4><p>在将一个过程应用于一组实际参数时，将会建立起一个新环境，其中包含了将所有形式参数约束于对应的实际参数的框架，该框架的外围环境就是所用的那个过程的环境。随后就在这个新环境之下求值过程体。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">square</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_3_2.png" alt="环境模型" title>                </div>                <div class="image-caption">环境模型</div>            </figure><h3 id="简单过程的应用"><a href="#简单过程的应用" class="headerlink" title="简单过程的应用"></a>简单过程的应用</h3><p>使用环境模型分析实例</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">square</span> x)</span><br><span class="line">  (<span class="name">*</span> x x))</span><br><span class="line">(<span class="name">define</span> (<span class="name">sum-of-squares</span> x y)</span><br><span class="line">  (<span class="name">+</span> (<span class="name">square</span> x) (<span class="name">square</span> y)))</span><br><span class="line">(<span class="name">define</span> (<span class="name">f</span> a)</span><br><span class="line">  (<span class="name">sum-of-squares</span> (<span class="name">+</span> a <span class="number">1</span>) (<span class="name">*</span> a <span class="number">2</span>)))</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_3_3.png" alt="环境模型" title>                </div>                <div class="image-caption">环境模型</div>            </figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">f</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_3_4.png" alt="环境模型" title>                </div>                <div class="image-caption">环境模型</div>            </figure><h3 id="将框架看作局部状态的仓库"><a href="#将框架看作局部状态的仓库" class="headerlink" title="将框架看作局部状态的仓库"></a>将框架看作局部状态的仓库</h3><p>一个例子</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">make-withdraw</span> balance)</span><br><span class="line">  (<span class="name">lambda</span> (<span class="name">amount</span>)</span><br><span class="line">    (<span class="name">if</span> (<span class="name">&gt;=</span> balance amount)</span><br><span class="line">        (<span class="name">begin</span> (<span class="name">set!</span> balance (<span class="name">-</span> balance amount))</span><br><span class="line">               balance)</span><br><span class="line">        <span class="string">"Insufficient funds"</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name">define</span> W1 (<span class="name">make-withdraw</span> <span class="number">100</span>))</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_3_5.png" alt="环境模型" title>                </div>                <div class="image-caption">环境模型</div>            </figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">W1</span> <span class="number">50</span>)</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_3_6.png" alt="环境模型" title>                </div>                <div class="image-caption">环境模型</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_3_7.png" alt="环境模型" title>                </div>                <div class="image-caption">环境模型</div>            </figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> W2 (<span class="name">make-withdraw</span> <span class="number">100</span>))</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_3_8.png" alt="环境模型" title>                </div>                <div class="image-caption">环境模型</div>            </figure><h3 id="内部定义"><a href="#内部定义" class="headerlink" title="内部定义"></a>内部定义</h3><p>利用环境模型考察内部定义的行为</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">sqrt</span> x)</span><br><span class="line">  (<span class="name">define</span> (<span class="name">good-enough</span>? guess)</span><br><span class="line">    (<span class="name">&lt;</span> (<span class="name">abs</span> (<span class="name">-</span> (<span class="name">square</span> guess) x)) <span class="number">0.001</span>))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">improve</span> guess)</span><br><span class="line">    (<span class="name">average</span> guess (<span class="name">/</span> x guess)))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">sqrt-iter</span> guess)</span><br><span class="line">    (<span class="name">if</span> (<span class="name">good-enough</span>? guess)</span><br><span class="line">        guess</span><br><span class="line">        (<span class="name">sqrt-iter</span> (<span class="name">improve</span> guess))))</span><br><span class="line">  (<span class="name">sqrt-iter</span> <span class="number">1.0</span>))</span><br><span class="line"></span><br><span class="line"> (<span class="name">sqrt</span> <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_3_9.png" alt="环境模型" title>                </div>                <div class="image-caption">环境模型</div>            </figure><h2 id="用变动数据（mutable-data）做模拟"><a href="#用变动数据（mutable-data）做模拟" class="headerlink" title="用变动数据（mutable data）做模拟"></a>用变动数据（mutable data）做模拟</h2><p>为了模拟那些由具有不断变化的状态组成的系统，我们除了需要做复合数据对象的构造和成分选择之外，还可能需要修改它们。为了模拟具有不断变化的状态的复合对象，我们将设计出与之对应的数据抽象，使其中不但包含了选择函数和构造函数，还有包含一些称为改变函数的操作，这种操作能够修改有关的数据对象。</p><p>举例，对银行系统的模拟就需要修改账户的余额。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（set-balance！&lt;accoun&gt; &lt;new-value&gt;）</span><br></pre></td></tr></table></figure></p><p>下面都是例子。。。</p><p>在此不列出</p><h2 id="并发（concurrency）：时间是一个本质问题"><a href="#并发（concurrency）：时间是一个本质问题" class="headerlink" title="并发（concurrency）：时间是一个本质问题"></a>并发（concurrency）：时间是一个本质问题</h2><p>具有内部状态的计算对象，存在时间问题，同一个表达式求值，却产生不同结果，因为赋值语句执行依赖于求值发生的时间。</p><p>现实中的对象是并发活动的，顺序计算机可以把它们像并发一样执行，可以使程序更加模块化，提供速度优势。</p><p>赋值使问题严重。</p><p>在处理时间和状态时，我们在计算模型领域所遭遇的复杂性，事实上，可能就是物理世界中最基本的复杂性。</p><h3 id="并发系统中时间的性质"><a href="#并发系统中时间的性质" class="headerlink" title="并发系统中时间的性质"></a>并发系统中时间的性质</h3><p>从表面上看，时间似乎是非常简单的东西。它也就是强加在各种事件上的一个顺序。</p><p>时间顺序的非确定性，可能对并发系统的设计提出严重问题。</p><p>一个例子</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_3_10.png" alt="时间顺序的问题" title>                </div>                <div class="image-caption">时间顺序的问题</div>            </figure><p>使事情变得更加复杂的原因，就是多个进程有可能同时试图去操作共享的状态。</p><h4 id="并发程序的正确行为"><a href="#并发程序的正确行为" class="headerlink" title="并发程序的正确行为"></a>并发程序的正确行为</h4><p>上面例子的情况非常典型，是可能潜藏在并发程序里的微妙错误。这一复杂性的根源，就在于这里出现了对不同进程之间共享的变量的赋值。对于并发进程，我们对于赋值就更需要特别小心，因为在这里可能无法控制其他进程所做赋值的出现顺序。如果几个这样的修改可能并发出现，我们就需要采用某些方式，以设法保证系统的行为是正确的。</p><p>对于并发的一种可能限制方式是规定，修改任意共享状态变量的两个操作都不允许同时发生。这是一个特别严厉的要求。这样做可能过于低效，也太保守了。</p><p>对于并发的另一种不那么严厉的限制方式是，保证并发系统产生出的结果与各个进程按照某种方式顺序运行产生出的结果完全一样。事件数量增加时，就很复杂。</p><h3 id="控制并发的机制"><a href="#控制并发的机制" class="headerlink" title="控制并发的机制"></a>控制并发的机制</h3><p>另一种更实际的方法是，在设计并发系统时，设法做出一些一般性的机制，使我们可能限制并行进程之间的交错情况，以保证程序具有正确的行为方式。人们已经为此目的而开发了许多不同的机制。这一节里将讨论其中的一种：串行化组（serializer）。</p><h4 id="对共享变量的串行访问"><a href="#对共享变量的串行访问" class="headerlink" title="对共享变量的串行访问"></a>对共享变量的串行访问</h4><p>串行化就是实现下面的想法：使进程可以并发地执行，但是其中也有一些过程不能并发地执行。说得更准确些，串行化就是创建一些不同的过程集合，并且保证在每个时刻，在任何一个串行化集合里至多只有一个过程的一个执行。如果某个集合里有过程正在执行，而另一进程企图执行这个集合里的任何过程时，它就必须等待到前一过程的执行结束。<br>我们可以借助串行化去控制对共享变量的访问。</p><p>例子</p><p>假设有一个实现串行执行的过程<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">parallel-execute</span> &lt;p1&gt; &lt;p2&gt; ... &lt;pk&gt;)</span><br></pre></td></tr></table></figure></p><p>使用make-serializer构造串行化组，串行化组以过程为参数，返回串行化的过程。对一个给定串行化组的所有调用返回的串行化过程都属于同一个集合。以实现执行过程不会交错进行。</p><p>例如<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> x <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">(<span class="name">define</span> s (<span class="name">make-serializer</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">parallel-execute</span> (<span class="name">s</span> (<span class="name">lambda</span> () (<span class="name">set!</span> x (<span class="name">*</span> x x))))</span><br><span class="line">                  (<span class="name">s</span> (<span class="name">lambda</span> () (<span class="name">set!</span> x (<span class="name">+</span> x <span class="number">1</span>)))))</span><br></pre></td></tr></table></figure></p><p>下面是存款和取款操作已经做了串行化的make-account<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">make-account</span> balance)</span><br><span class="line">  (<span class="name">define</span> (<span class="name">withdraw</span> amount)</span><br><span class="line">    (<span class="name">if</span> (<span class="name">&gt;=</span> balance amount)</span><br><span class="line">        (<span class="name">begin</span> (<span class="name">set!</span> balance (<span class="name">-</span> balance amount))</span><br><span class="line">               balance)</span><br><span class="line">        <span class="string">"Insufficient funds"</span>))</span><br><span class="line">  (<span class="name">define</span> (<span class="name">deposit</span> amount)</span><br><span class="line">    (<span class="name">set!</span> balance (<span class="name">+</span> balance amount))</span><br><span class="line">    balance)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">protected</span> (<span class="name">make-serializer</span>)))</span><br><span class="line">    (<span class="name">define</span> (<span class="name">dispatch</span> m)</span><br><span class="line">      (<span class="name">cond</span> ((<span class="name">eq</span>? m 'withdraw) (<span class="name">protected</span> withdraw))</span><br><span class="line">            ((<span class="name">eq</span>? m 'deposit) (<span class="name">protected</span> deposit))</span><br><span class="line">            ((<span class="name">eq</span>? m 'balance) balance)</span><br><span class="line">            (<span class="name">else</span> (<span class="name">error</span> <span class="string">"Unknown request -- MAKE-ACCOUNT"</span></span><br><span class="line">                         m))))</span><br><span class="line">    dispatch))</span><br></pre></td></tr></table></figure></p><h4 id="使用多重共享资源的复杂性"><a href="#使用多重共享资源的复杂性" class="headerlink" title="使用多重共享资源的复杂性"></a>使用多重共享资源的复杂性</h4><p>串行化提供了一种非常强有力的抽象，能帮助我们将并发程序的复杂性孤立起来，使这种程序能够被小心地和（希望是）正确地处理。然而，如果只存在一个共享资源（例如一个银行账户），串行化的使用问题是相对比较简单的。但是如果存在着多项共享资源，并发程序设计就可能变得非常难以把握了。</p><h4 id="串行化的实现"><a href="#串行化的实现" class="headerlink" title="串行化的实现"></a>串行化的实现</h4><p>我们将用一种更基本的称为互斥元（mutex）的同步机制来实现串行化。互斥元是一种对象，假定它提供了两个操作。一个互斥元可以被获取（acquired）或者被释放（released）。一旦某个互斥元被获取，对于这一互斥元的任何其他获取操作都必须等到该互斥元被释放之后。</p><p>在我们的实现里，每个串行化组关联着一个互斥元。给了一个过程p，串行化组将返回一个过程，该过程将获取相应互斥元，而后运行p，而后释放该互斥元。这样就能保证，由这个串行化组产生的所有过程中，一次只能运行一个，这就是需要保证的串行化性质。</p><h4 id="死锁（deadlock）"><a href="#死锁（deadlock）" class="headerlink" title="死锁（deadlock）"></a>死锁（deadlock）</h4><p>现在已经看了可以如何实现串行化，但也应该看到，即使采用了上面给出的过程serialized-exchange，在账户交换问题里还存在一个麻烦。</p><p>现在设想Peter企图去交换账户al和a2，同时Paul并发地企图去交换a2和a1。假定Peter的进程到达这样一点，此时它已经进入了保护a1的串行化进程，而正好在此之后，Paul的进程也进入了保护a2的串行化进程。现在Peter已经无法继续前进了（因为无法进入保护a2的串行化进程），他需要一直等到Paul退出保护a2的串行化进程。与Peter的情况类似，Paul也无法前进了，他需要等到Peter退出保护a1的串行化进程。这样每个进程都要无穷无尽地等待下去，等着另一个进程的活动，这种情况就称为死锁。在那些提供了对于多种共享资源的并发访问的系统里，总是存在着死锁的危险。</p><h2 id="流（streams）"><a href="#流（streams）" class="headerlink" title="流（streams）"></a>流（streams）</h2><p>如果用离散的步长去度量时间，那么我们就可以用一个（可能无穷的）序列去模拟一个时间函数。在这一节里，我们将看到如何用这样的序列去模拟变化，为了做到这些，我们需要引进一种称为流的新数据结构，探索对状态进行模拟的另一条途径，以避免赋值带来的问题。</p><h3 id="流作为延时的表"><a href="#流作为延时的表" class="headerlink" title="流作为延时的表"></a>流作为延时的表</h3><p>流是一种非常巧妙的想法，使我们可能利用各种序列操作，但又不会带来将序列作为表去操作而引起的代价。利用流结构，我们能得到这两个世界里最好的东西：如此形成的程序可以像序列操作那么优雅，同时又能得到递增计算的效率。如果使用者需要访问这个流的尚未构造出的那个部分，那么这个流就会自动地继续构造下去，但是只做出足够满足当时需要的那一部分。</p><p>例如<br>通过序列方式去计算从10000到1000000的区间里的第二个素数，这种低效情况就表现得太明显了：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">car</span> (<span class="name">cdr</span> (<span class="name">filter</span> prime?</span><br><span class="line">                  (<span class="name">enumerate-interval</span> <span class="number">10000</span> <span class="number">1000000</span>))))</span><br></pre></td></tr></table></figure><p>而使用流计算从10000到1000000的区间里的第二个素数<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">stream-car</span></span><br><span class="line"> (<span class="name">stream-cdr</span></span><br><span class="line">  (<span class="name">stream-filter</span> prime?</span><br><span class="line">                 (<span class="name">stream-enumerate-interval</span> <span class="number">10000</span> <span class="number">1000000</span>))))</span><br></pre></td></tr></table></figure></p><p>最终到这一步就返回了10009<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">cons</span> <span class="number">10009</span></span><br><span class="line">      (<span class="name">delay</span></span><br><span class="line">        (<span class="name">stream-filter</span></span><br><span class="line">         prime?</span><br><span class="line">         (<span class="name">cons</span> <span class="number">10010</span></span><br><span class="line">               (<span class="name">delay</span></span><br><span class="line">                 (<span class="name">stream-enumerate-interval</span> <span class="number">10011</span></span><br><span class="line">                                            <span class="number">1000000</span>))))))</span><br></pre></td></tr></table></figure></p><h4 id="delay和force的实现"><a href="#delay和force的实现" class="headerlink" title="delay和force的实现"></a>delay和force的实现</h4><p>delay必须包装起一个表达式，使它可以在以后根据需要去求值<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（delay &lt;exp&gt;）</span><br></pre></td></tr></table></figure></p><p>实际上不过是在下面形式的外面包装起一层语法糖衣：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（lambda（）&lt;exp&gt;）</span><br></pre></td></tr></table></figure></p><p>而force也就是简单地调用由delay产生的那种（无参）过程<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（define（force delayed-object）</span><br><span class="line">（delayed-object））</span><br></pre></td></tr></table></figure></p><h3 id="无穷流"><a href="#无穷流" class="headerlink" title="无穷流"></a>无穷流</h3><p>例如 正整数<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">integers-starting-from</span> n)</span><br><span class="line">  (<span class="name">cons-stream</span> n (<span class="name">integers-starting-from</span> (<span class="name">+</span> n <span class="number">1</span>))))</span><br><span class="line"></span><br><span class="line">(<span class="name">define</span> integers (<span class="name">integers-starting-from</span> <span class="number">1</span>))</span><br></pre></td></tr></table></figure></p><h4 id="隐式地定义流"><a href="#隐式地定义流" class="headerlink" title="隐式地定义流"></a>隐式地定义流</h4><p>例如 1,1,1,…<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> ones (<span class="name">cons-stream</span> <span class="number">1</span> ones))</span><br></pre></td></tr></table></figure></p><p>例如 Fibonacci 数<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> fibs</span><br><span class="line">  (<span class="name">cons-stream</span> <span class="number">0</span></span><br><span class="line">               (<span class="name">cons-stream</span> <span class="number">1</span></span><br><span class="line">                            (<span class="name">add-streams</span> (<span class="name">stream-cdr</span> fibs)</span><br><span class="line">                                         fibs))))</span><br></pre></td></tr></table></figure></p><h3 id="流计算模式的使用"><a href="#流计算模式的使用" class="headerlink" title="流计算模式的使用"></a>流计算模式的使用</h3><h4 id="系统地将迭代操作方式表示为流过程"><a href="#系统地将迭代操作方式表示为流过程" class="headerlink" title="系统地将迭代操作方式表示为流过程"></a>系统地将迭代操作方式表示为流过程</h4><p>例如<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">sqrt-improve</span> guess x)</span><br><span class="line">  (<span class="name">average</span> guess (<span class="name">/</span> x guess)))</span><br><span class="line"></span><br><span class="line">(<span class="name">define</span> (<span class="name">sqrt-stream</span> x)</span><br><span class="line">  (<span class="name">define</span> guesses</span><br><span class="line">    (<span class="name">cons-stream</span> <span class="number">1.0</span></span><br><span class="line">                 (<span class="name">stream-map</span> (<span class="name">lambda</span> (<span class="name">guess</span>)</span><br><span class="line">                               (<span class="name">sqrt-improve</span> guess x))</span><br><span class="line">                             guesses)))</span><br><span class="line">  guesses)</span><br><span class="line">(<span class="name">display-stream</span> (<span class="name">sqrt-stream</span> <span class="number">2</span>))</span><br><span class="line">1.</span><br><span class="line"><span class="number">1.5</span></span><br><span class="line"><span class="number">1.4166666666666665</span></span><br><span class="line"><span class="number">1.4142156862745097</span></span><br><span class="line"><span class="number">1.4142135623746899</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h4 id="序对的无穷流"><a href="#序对的无穷流" class="headerlink" title="序对的无穷流"></a>序对的无穷流</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_3_11.png" alt="序对的无穷流" title>                </div>                <div class="image-caption">序对的无穷流</div>            </figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">stream-map</span> (<span class="name">lambda</span> (<span class="name">x</span>) (<span class="name">list</span> (<span class="name">stream-car</span> s) x))</span><br><span class="line">            (<span class="name">stream-cdr</span> <span class="literal">t</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">define</span> (<span class="name">interleave</span> s1 s2)</span><br><span class="line">  (<span class="name">if</span> (<span class="name">stream-null</span>? s1)</span><br><span class="line">      s2</span><br><span class="line">      (<span class="name">cons-stream</span> (<span class="name">stream-car</span> s1)</span><br><span class="line">                   (<span class="name">interleave</span> s2 (<span class="name">stream-cdr</span> s1)))))</span><br><span class="line"></span><br><span class="line">(<span class="name">define</span> (<span class="name">pairs</span> s <span class="literal">t</span>)</span><br><span class="line">  (<span class="name">cons-stream</span></span><br><span class="line">   (<span class="name">list</span> (<span class="name">stream-car</span> s) (<span class="name">stream-car</span> <span class="literal">t</span>))</span><br><span class="line">   (<span class="name">interleave</span></span><br><span class="line">    (<span class="name">stream-map</span> (<span class="name">lambda</span> (<span class="name">x</span>) (<span class="name">list</span> (<span class="name">stream-car</span> s) x))</span><br><span class="line">                (<span class="name">stream-cdr</span> <span class="literal">t</span>))</span><br><span class="line">    (<span class="name">pairs</span> (<span class="name">stream-cdr</span> s) (<span class="name">stream-cdr</span> <span class="literal">t</span>)))))</span><br></pre></td></tr></table></figure><h4 id="将流作为信号"><a href="#将流作为信号" class="headerlink" title="将流作为信号"></a>将流作为信号</h4><p>实现一个积分器</p><script type="math/tex; mode=display">S_i=C+\sum_{j=1}^{i}x_jdt</script><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">integral</span> integrand initial-value dt)</span><br><span class="line">  (<span class="name">define</span> int</span><br><span class="line">    (<span class="name">cons-stream</span> initial-value</span><br><span class="line">                 (<span class="name">add-streams</span> (<span class="name">scale-stream</span> integrand dt)</span><br><span class="line">                              int)))</span><br><span class="line">  int)</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/sicp_3_12.png" alt="信号处理系统" title>                </div>                <div class="image-caption">信号处理系统</div>            </figure><h3 id="流和延迟求值"><a href="#流和延迟求值" class="headerlink" title="流和延迟求值"></a>流和延迟求值</h3><p>定义反馈循环的能力依赖于 delay。</p><h4 id="规范序求值"><a href="#规范序求值" class="headerlink" title="规范序求值"></a>规范序求值</h4><p>我们已经构造出了两类过程：常规的过程和要求延时参数的过程。一般说，如果创建了不同种类的过程，就将迫使我们同时去创建不同种类的高阶过程。为了避免这个问题，一种方式是让所有过程都用延时参数。我们可以采纳一种求值模型，其中所有过程参数都自动延时，只有在实际需要它们的时候才强迫参数求值。这样做，就把我们的语言转到了采用规范序的方式。</p><p>不幸的是，把延时包含到过程调用中，将会对我们设计依赖于事件顺序的程序的能力造成极大损害。</p><p>目前所有的人都知道，变动性和延时求值在程序设计语言里结合得非常不好，设计出某些方式，适当地处理这两种东西，仍然是一个很活跃的研究领域。</p><h3 id="函数式程序的模块化和对象的模块化"><a href="#函数式程序的模块化和对象的模块化" class="headerlink" title="函数式程序的模块化和对象的模块化"></a>函数式程序的模块化和对象的模块化</h3><p>引进赋值的主要收益就是使我们可以增强系统的模块化，把一个大系统的状态中的某些部分封装隐藏到局部变量里。流模型可以提供等价的模块化，同时又不必使用赋值。</p><h4 id="时间的函数式程序设计观点"><a href="#时间的函数式程序设计观点" class="headerlink" title="时间的函数式程序设计观点"></a>时间的函数式程序设计观点</h4><p>本章开始时提出了一个目标，那就是构造出一些计算模型，使其结构能够符合我们对于试图去模拟的真实世界的看法。我们可以将这一世界模拟为一集相互分离的、受时间约束的、具有状态的相互交流的对象，或者可以将它模拟为单一的、无时间也无状态的统一体。每种观点都有其强有力的优势，但就其自身而言，又没有一种方式能够完全令人满意。我们还在等待着一个大统一的出现。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>主要通过实例和习题来理解。。。</p><p>然而毕竟是入门课程，其中涉及的很多知识点在其它地方都了解过了。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;sicp是编程方面的入门课程。&lt;/p&gt;
&lt;p&gt;有关sicp的资源和评价很多，在此不多介绍。&lt;/p&gt;
&lt;p&gt;一些相关资源链接：&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="课程" scheme="https://4eay7lab.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="本科补全" scheme="https://4eay7lab.com/tags/%E6%9C%AC%E7%A7%91%E8%A1%A5%E5%85%A8/"/>
    
      <category term="程序设计" scheme="https://4eay7lab.com/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="sicp" scheme="https://4eay7lab.com/tags/sicp/"/>
    
  </entry>
  
  <entry>
    <title>nand2tetris ch6 汇编器</title>
    <link href="https://4eay7lab.com/2019/07/11/nand2tetris-6/"/>
    <id>https://4eay7lab.com/2019/07/11/nand2tetris-6/</id>
    <published>2019-07-10T16:00:00.000Z</published>
    <updated>2020-10-26T07:31:31.407Z</updated>
    
    <content type="html"><![CDATA[<p>这一章没多少新内容，主要是按照规则写个汇编器。。。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>从第6章开始将开始关注计算机的软件层次，其中，汇编器是最基础的模块。</p><p>符号汇编指令和相应的二进制编码之间的关系很直接，所以写一个汇编器不难。唯一的困难是管理用户定义符号并解析到物理内存地址，通常会使用符号表（数据结构是哈希表）来完成，这在许多软件翻译项目中都有用到。</p><p>由于二进制码的含义相当晦涩，通常机器语言会指定它的二进制码（Binary codes）和符号助记符（Symbolic mnemonics）。我们不仅可以借助符号读程序，也可以这样写程序而不必使用二进制。我们可以使用一个文本处理程序，将符号解析为二进制机器指令。这个符号就叫做汇编语言（Assembly），这个程序叫做汇编器（Assembler），这个过程叫做汇编。</p><h1 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h1><p>汇编语言中会出现符号，符号指代内存中的地址。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>程序员用到的符号变量名，翻译器会自动分配到内存地址。</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>程序员用标签标记程序中的不同位置。</p><h1 id="符号解析"><a href="#符号解析" class="headerlink" title="符号解析"></a>符号解析</h1><p>把有符号的程序转换成无符号的代码。</p><p>一个例子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_6_0.png" alt="一个例子" title>                </div>                <div class="image-caption">一个例子</div>            </figure><h1 id="汇编器"><a href="#汇编器" class="headerlink" title="汇编器"></a>汇编器</h1><p>我们看到汇编器本质上是一个提供翻译服务的文本处理程序。 </p><p>汇编器需要遵守机器语言规范（machine language specification），执行以下任务（不一定是这个顺序）：</p><ul><li>将符号指令解析为其基础字段。</li><li>对于每个字段，用机器语言生成相应的位。</li><li>用内存的数字地址替换所有符号引用（如果有）。</li><li>将二进制代码汇编成完整的机器指令。</li></ul><p>除了替换符号为地址这一步，其它3步都比较简单。</p><h1 id="Hack汇编翻译规范"><a href="#Hack汇编翻译规范" class="headerlink" title="Hack汇编翻译规范"></a>Hack汇编翻译规范</h1><h2 id="语法传统和文件格式"><a href="#语法传统和文件格式" class="headerlink" title="语法传统和文件格式"></a>语法传统和文件格式</h2><h3 id="二进制文件（Binary-code-files）"><a href="#二进制文件（Binary-code-files）" class="headerlink" title="二进制文件（Binary code files）"></a>二进制文件（Binary code files）</h3><p>扩展名为hack。一行一个16位01串，指定一个机器语言指令。第n行地址为n（n是从0开始的）。</p><h3 id="汇编文件（Assembly-language-files）"><a href="#汇编文件（Assembly-language-files）" class="headerlink" title="汇编文件（Assembly language files）"></a>汇编文件（Assembly language files）</h3><p>扩展名为asm。</p><p>每行为一个Instruction或者 (Symbol)。</p><p>常量非负且为10进制，用户定义的符号可以是字母、数字、下划线（_）、点（.）、美元符号（$）、冒号（:），不能以数字开头。</p><p>//后为单行注释。</p><p>空白、空行忽略。</p><p>约定助记符、标记名大写，变量名小写。</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_4_4.png" alt="A" title>                </div>                <div class="image-caption">A</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_4_5.png" alt="C" title>                </div>                <div class="image-caption">C</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_4_6.png" alt="comp" title>                </div>                <div class="image-caption">comp</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_4_7.png" alt="dest" title>                </div>                <div class="image-caption">dest</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_4_8.png" alt="jump" title>                </div>                <div class="image-caption">jump</div>            </figure><h2 id="符号-1"><a href="#符号-1" class="headerlink" title="符号"></a>符号</h2><h3 id="预定义符号（Predefined-symbols）"><a href="#预定义符号（Predefined-symbols）" class="headerlink" title="预定义符号（Predefined symbols）"></a>预定义符号（Predefined symbols）</h3><p>RAM的一部分地址可以用预定义符号指定。</p><ul><li>虚拟寄存器（Virtual registers）：用R0~R15指定RAM[0]~RAM[15]。</li><li>预定义指针（Predefined pointers）：用SP、LCL、ARG、THIS、THAT指定RAM[0]~RAM[4]。</li><li>I/O指针（I/O pointers）：用SCREEN、KBD指定RAM[16384]（RAM[0x4000]）和RAM[24576]（RAM[0x6000]），这是屏幕和键盘的内存映射的基地址。</li></ul><h3 id="标记符号（Label-symbols）"><a href="#标记符号（Label-symbols）" class="headerlink" title="标记符号（Label symbols）"></a>标记符号（Label symbols）</h3><p>用户定义的用于表示goto的目的地址的符号，用伪命令“(Xxx)”来声明。</p><h3 id="变量符号（Variable-symbols）"><a href="#变量符号（Variable-symbols）" class="headerlink" title="变量符号（Variable symbols）"></a>变量符号（Variable symbols）</h3><p>用户定义的符号Xxx，Xxx不是预定义符号和标记符号，那么就是一个变量，汇编器会分配一个唯一的内存地址，从RAM[0x0010]开始。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>官方提供了可以参考的API。</p><h3 id="Parser"><a href="#Parser" class="headerlink" title="Parser"></a>Parser</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_6_1.png" alt="parser" title>                </div>                <div class="image-caption">parser</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_6_2.png" alt="parser" title>                </div>                <div class="image-caption">parser</div>            </figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_6_3.png" alt="parser" title>                </div>                <div class="image-caption">parser</div>            </figure><h3 id="无符号汇编器"><a href="#无符号汇编器" class="headerlink" title="无符号汇编器"></a>无符号汇编器</h3><p>用以上2个模块即可。</p><h3 id="SymbolTable"><a href="#SymbolTable" class="headerlink" title="SymbolTable"></a>SymbolTable</h3><p>就是一个哈希表。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_6_4.png" alt="parser" title>                </div>                <div class="image-caption">parser</div>            </figure><h3 id="有符号汇编器"><a href="#有符号汇编器" class="headerlink" title="有符号汇编器"></a>有符号汇编器</h3><p>用上符号表，按照以下步骤实现有符号汇编器：</p><ul><li>初始化：把预定义符号添加到符号表。</li><li>第一遍：扫描一遍，把标记符号添加到符号表。</li><li>第二遍：扫描一遍，把变量符号（只会出现在A指令）添加到符号表，完成指令的翻译。</li></ul><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><p>用任意编程语言开发一个汇编器，能将asm文件汇编为hack文件。要求和官方提供的汇编器的汇编功能一致。可能用到的工具依然是官方提供的汇编器。。。</p><p>（我的代码见github</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这一章没多少新内容，主要是按照规则写个汇编器。。。&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;从第6章开始将开始关注计算机的软件层次，其中，汇编器是最基础的模块。&lt;/p
      
    
    </summary>
    
      <category term="课程" scheme="https://4eay7lab.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="计算机系统" scheme="https://4eay7lab.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="nand2tetris" scheme="https://4eay7lab.com/tags/nand2tetris/"/>
    
      <category term="本科补全" scheme="https://4eay7lab.com/tags/%E6%9C%AC%E7%A7%91%E8%A1%A5%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>nand2tetris ch5 计算机体系结构</title>
    <link href="https://4eay7lab.com/2019/07/09/nand2tetris-5/"/>
    <id>https://4eay7lab.com/2019/07/09/nand2tetris-5/</id>
    <published>2019-07-08T16:00:00.000Z</published>
    <updated>2020-10-26T07:31:31.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这一章是硬件部分（1-5章）的最后一章。这一章会使用1-3章的芯片造一个通用计算机（名为Hack），并且可以运行第4章的机器语言编写的程序。</p><p>Hack有2个优点，一是简单，几个小时就可以用芯片和硬件模拟器造出来，二是它能够说明任何数字计算机的关键操作和硬件组成。</p><h1 id="存储程序概念（The-Stored-Program-Concept）"><a href="#存储程序概念（The-Stored-Program-Concept）" class="headerlink" title="存储程序概念（The Stored Program Concept）"></a>存储程序概念（The Stored Program Concept）</h1><p>数字计算机是多功能的，能够在有限的硬件平台加载不同的程序，执行多种的任务，从交互式游戏到文字处理再到科学计算，这是存储程序概念带来的结果。</p><h1 id="冯诺依曼结构（The-von-Neumann-Architecture）"><a href="#冯诺依曼结构（The-von-Neumann-Architecture）" class="headerlink" title="冯诺依曼结构（The von Neumann Architecture）"></a>冯诺依曼结构（The von Neumann Architecture）</h1><p>存储程序概念是抽象和实用的计算机模型的关键要素，最值得注意的是通用图灵机（universal Turing machine）（1936年）和冯诺依曼机（von Neumann machine）（1945年）。图灵机是一个抽象描述，用于分析计算机系统的逻辑基础。冯诺依曼机是一个实用的结构，它是现在几乎所有计算机的概念蓝图。</p><p>冯诺依曼结构基于一个CPU，和存储设备交互，从输入设备获取数据，发送数据到输出设备。中心是基于存储程序概念，存储器存储数据和指令。下面讲这种结构的细节。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_5_0.png" alt="冯诺依曼结构" title>                </div>                <div class="image-caption">冯诺依曼结构</div>            </figure><h2 id="存储器（Memory）"><a href="#存储器（Memory）" class="headerlink" title="存储器（Memory）"></a>存储器（Memory）</h2><p>冯诺依曼的存储器存储2种类型的信息：数据和指令。它们存储在不同的单元中，而它们都是以二进制形式表示，存储在基本的随机存取结构中：一个连续的固定字长的单元的数组（Words or Locations），每一个单元都有唯一的地址（Address）。通过提供地址来确定一个字。</p><h3 id="数据存储器（Data-Memory）"><a href="#数据存储器（Data-Memory）" class="headerlink" title="数据存储器（Data Memory）"></a>数据存储器（Data Memory）</h3><p>高级程序的抽象部分，比如变量、数组、对象，以二进制形式存储在数据存储器。</p><h3 id="指令存储器（Instruction-Memory）"><a href="#指令存储器（Instruction-Memory）" class="headerlink" title="指令存储器（Instruction Memory）"></a>指令存储器（Instruction Memory）</h3><p>高级程序命令被翻译成机器语言，以二进制形式储存在指令存储器。</p><h2 id="CPU（Central-Processing-Unit）"><a href="#CPU（Central-Processing-Unit）" class="headerlink" title="CPU（Central Processing Unit）"></a>CPU（Central Processing Unit）</h2><p>CPU作为计算机结构的中心，执行被加载的程序的指令。指令告诉CPU进行各种计算、读写数据、条件跳转。CPU使用3个主要的硬件来执行任务：ALU、寄存器、控制单元。</p><h3 id="ALU（Arithmetic-Logic-Unit）"><a href="#ALU（Arithmetic-Logic-Unit）" class="headerlink" title="ALU（Arithmetic Logic Unit）"></a>ALU（Arithmetic Logic Unit）</h3><p>进行低级的算术和逻辑运算。</p><h3 id="控制单元（Control-Unit）"><a href="#控制单元（Control-Unit）" class="headerlink" title="控制单元（Control Unit）"></a>控制单元（Control Unit）</h3><p>指令是二进制编码，在它执行之前需要解码，并且其中的信息必须给一些硬件设备信号，以执行指令。解码就是由控制单元完成的。</p><p>现在，CPU的操作可以被描述为一个循环：取指令，解码，执行，再取指令…</p><h3 id="寄存器（Registers）"><a href="#寄存器（Registers）" class="headerlink" title="寄存器（Registers）"></a>寄存器（Registers）</h3><p>和RAM相比，寄存器可以更快捷地存取数据。</p><p>寄存器有多种用处：</p><h4 id="数据寄存器（Data-registers）"><a href="#数据寄存器（Data-registers）" class="headerlink" title="数据寄存器（Data registers）"></a>数据寄存器（Data registers）</h4><p>提供数据暂存功能。</p><h4 id="寻址寄存器（Addressing-registers）"><a href="#寻址寄存器（Addressing-registers）" class="headerlink" title="寻址寄存器（Addressing registers）"></a>寻址寄存器（Addressing registers）</h4><p>地址被存储在寄存器，以访问内存地址，存取数据。</p><h4 id="程序计数器寄存器（Program-counter-register）"><a href="#程序计数器寄存器（Program-counter-register）" class="headerlink" title="程序计数器寄存器（Program counter register）"></a>程序计数器寄存器（Program counter register）</h4><p>执行程序时，CPU必须始终保持跟踪，获取下一条指令的地址。这个地址被保存在一个特殊的寄存器PC中，也就是PC中的内容将作为下一条指令的地址。在执行指令时，PC会用2种方法中的一种更新：没有goto指令，PC把地址+1；有goto n，PC修改为n。</p><h2 id="输入和输出（Input-and-Output）"><a href="#输入和输出（Input-and-Output）" class="headerlink" title="输入和输出（Input and Output）"></a>输入和输出（Input and Output）</h2><p>外设有很多，每种都代表着一种独特的机械设备，需要独特的工程知识。于是，计算机科学家设计了各种方案，使所有这些设备看起来与计算机相同。 此领域中最简单的技术称为内存映射I/O（memory-mapped I/O）。基本思路是创建一个I/O设备的二进制模拟，使它对于CPU来说就像一个普通的内存段。</p><h1 id="Hack硬件平台规范（The-Hack-Hardware-Platform-Specification）"><a href="#Hack硬件平台规范（The-Hack-Hardware-Platform-Specification）" class="headerlink" title="Hack硬件平台规范（The Hack Hardware Platform Specification）"></a>Hack硬件平台规范（The Hack Hardware Platform Specification）</h1><h2 id="概观"><a href="#概观" class="headerlink" title="概观"></a>概观</h2><p>Hack是一个冯诺依曼结构的计算机，16位，组成部分有CPU、2个分立的存储模块（一个指令存储器、一个数据存储器）、2个内存映射I/O设备（一个屏幕、一个键盘）。</p><p>CPU执行指令存储器中的指令。指令存储器是一个只读的设备，程序是由一些外部方法写入的。</p><p>现在开始，我们认为Hack的数据存储器和指令存储器分别为RAM和ROM。</p><p>CPU由ALU、D寄存器、A寄存器、PC寄存器组成。</p><p>D、A是16位通用寄存器。D用来存数据。A用来存数据、或存放RAM地址、或存放ROM地址。</p><p>机器语言基于2种指令类型，A指令、C指令。</p><p>计算机的连接方式中，PC的输出被连接到ROM的地址输入。</p><p>一个时钟周期，计算机的操作为：取指令，执行。一个“取指令-执行”周期表明一个内存访问操作一般包括寻址指令和一个后续指令（读写指令、分支指令）。</p><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_5_1.png" alt="CPU" title>                </div>                <div class="image-caption">CPU</div>            </figure><h2 id="ROM"><a href="#ROM" class="headerlink" title="ROM"></a>ROM</h2><p>这是内建的，我们只要把程序加载进去。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_5_2.png" alt="ROM32K" title>                </div>                <div class="image-caption">ROM32K</div>            </figure><h2 id="屏幕"><a href="#屏幕" class="headerlink" title="屏幕"></a>屏幕</h2><p>内建的，不需要实现内部细节。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_5_3.png" alt="屏幕" title>                </div>                <div class="image-caption">屏幕</div>            </figure><h2 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h2><p>内建的，不需要实现内部细节。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_5_4.png" alt="键盘" title>                </div>                <div class="image-caption">键盘</div>            </figure><p>特殊的键值：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_5_5.png" alt="键值" title>                </div>                <div class="image-caption">键值</div>            </figure><h2 id="总内存（Overall-Memory）"><a href="#总内存（Overall-Memory）" class="headerlink" title="总内存（Overall Memory）"></a>总内存（Overall Memory）</h2><p>包括RAM和屏幕、键盘的内存映射。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_5_6.png" alt="数据存储器" title>                </div>                <div class="image-caption">数据存储器</div>            </figure><h2 id="计算机（Computer）"><a href="#计算机（Computer）" class="headerlink" title="计算机（Computer）"></a>计算机（Computer）</h2><p>计算机芯片包含所有必要的硬件设备来操作计算机，包括CPU、数据存储器、指令存储器、屏幕、键盘。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_5_7.png" alt="计算机" title>                </div>                <div class="image-caption">计算机</div>            </figure><p>这些当然还是在用HDL写，然后在硬件模拟器里模拟。</p><p>这里建造的难点是CPU，其他的都很直接了。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="CPU的实现"><a href="#CPU的实现" class="headerlink" title="CPU的实现"></a>CPU的实现</h3><p>最难的是CPU。</p><p>CPU就是取指令、执行。。。</p><p>先了解A指令和C指令：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_4_4.png" alt="A指令" title>                </div>                <div class="image-caption">A指令</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_4_5.png" alt="C指令" title>                </div>                <div class="image-caption">C指令</div>            </figure><p>了解后可得到以下数据通路：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_5_8.png" alt="CPU的实现" title>                </div>                <div class="image-caption">CPU的实现</div>            </figure><p>其中控制逻辑（control logic）没有详细给出（图中的C）。</p><p>控制逻辑需要完成以下任务：</p><h4 id="指令译码"><a href="#指令译码" class="headerlink" title="指令译码"></a>指令译码</h4><p>一条16位的指令可能是A指令或C指令。为了知道一条指令的含义，需要将一条指令分为‘i xx a cccccc ddd jjj’几个字段。</p><ul><li>i：若为0就是A指令，若为1就是C指令。</li><li>a cccccc：C指令comp部分。</li><li>ddd：C指令dest部分。</li><li>jjj：C指令jump部分。</li></ul><p>A指令除了i位的低15位被解释成一个常数。</p><h4 id="指令执行"><a href="#指令执行" class="headerlink" title="指令执行"></a>指令执行</h4><p>将‘i xx a cccccc ddd jjj’这几个部分同时发送到相应的结构执行相应操作。</p><h4 id="取下一条指令"><a href="#取下一条指令" class="headerlink" title="取下一条指令"></a>取下一条指令</h4><p>执行一条指令的同时需要知道下一条指令。</p><p>CPU使用PC的输出作为pc端的输出。</p><p>t是现在的时间单元，默认的操作是$PC(t)=PC(t-1)+1$。如果需要goto n，需要先通过A指令把A寄存器设置为n，然后再跳转。</p><p>所以我们需要实现以下逻辑：</p><p>$PC(t)=\begin{cases}A(t-1),&amp;jump(t) \cr PC(t-1)+1,&amp;otherwise\end{cases}$</p><h3 id="计算机的实现"><a href="#计算机的实现" class="headerlink" title="计算机的实现"></a>计算机的实现</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_5_9.png" alt="计算机的实现" title>                </div>                <div class="image-caption">计算机的实现</div>            </figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Hack是一种最小化的计算机。然而从定性的角度来看，Hack与大多数数字计算机非常相似，因为它们都遵循相同的概念：冯诺依曼架构。</p><p>在功能方面，计算机系统可分为两类：通用计算机，旨在轻松切换执行一个程序；专用计算机，通常嵌入其他系统，对于任何特定的应用程序，单个程序被烧录到专用计算机的ROM，是唯一可以执行的。（Hack应该是专用计算机。。。？） 除了这种差异，通用和专用计算机共享相同的架构思想：存储程序，获取-解码-执行的逻辑，CPU，寄存器，程序计数器等等。</p><p>大多数通用计算机使用单个地址空间来存储数据和指令，而Hack将其分成两个独立的部分。</p><p>在I / O方面，Hack键盘和屏幕相当简洁。</p><p>设计中的大部分努力都是为了使计算机硬件有更好的性能。 因此，硬件架构课程和教科书通常围绕诸如内存层次结构（缓存），对I / O设备的更好访问，流水线，并行性，指令预取以及其他优化技术展开，当然在这门课程中都没有涉及。</p><p>从历史上看，尝试提高处理器的性能已经导致了两个设计模式。 复杂指令集计算机（CISC）通过提供丰富的功能和复杂的指令来实现更好的性能。精简指令集计算机（RISC）使用更简单的指令集来促进硬件尽可能快速实施。 Hack计算机不属于以上2者（。。。）。</p><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><p>project是用之前造好的芯片来实现Hack电脑平台。（我的代码见github</p><p>使用硬件模拟器测试。</p><p>可能需要查看附录A和附录B。</p><p>需要建造的芯片列表：</p><ul><li>Memory</li><li>CPU</li><li>Computer</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;这一章是硬件部分（1-5章）的最后一章。这一章会使用1-3章的芯片造一个通用计算机（名为Hack），并且可以运行第4章的机器语言编写的程序。
      
    
    </summary>
    
      <category term="课程" scheme="https://4eay7lab.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="计算机系统" scheme="https://4eay7lab.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="nand2tetris" scheme="https://4eay7lab.com/tags/nand2tetris/"/>
    
      <category term="本科补全" scheme="https://4eay7lab.com/tags/%E6%9C%AC%E7%A7%91%E8%A1%A5%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>nand2tetris ch4 机器语言</title>
    <link href="https://4eay7lab.com/2019/07/07/nand2tetris-4/"/>
    <id>https://4eay7lab.com/2019/07/07/nand2tetris-4/</id>
    <published>2019-07-06T16:00:04.000Z</published>
    <updated>2020-10-26T07:31:31.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>机器语言处于软件和硬件之间，既是一个编程工具，也是硬件平台的组成部分。它旨在编写低级程序当作一系列的机器指令，这些指令命令处理器执行算术和逻辑运算、从内存中存取值、将一个寄存器的值移动到另一个寄存器、测试布尔条件等。和高级语言不同，机器语言的要求是直接执行和完全控制特定的硬件平台。</p><p>了解用机器语言编写的低级程序，可以方便我们熟悉计算机系统。这不仅帮助我们理解如何编程，而且可以知道硬件为何这样设计。</p><p>下面会先大致介绍机器语言，然后给出Hack的机器语言的具体细节，包括二进制版本（Binary）以及符号汇编版本（Symbolic assembly）。注意，我们在这里抽象底层硬件的具体实现，只需要关注一个处理器（Processor）、一个内存（Memory）、一些寄存器（Registers）。</p><h1 id="机器（Machines）"><a href="#机器（Machines）" class="headerlink" title="机器（Machines）"></a>机器（Machines）</h1><h2 id="内存（Memory）"><a href="#内存（Memory）" class="headerlink" title="内存（Memory）"></a>内存（Memory）</h2><p>这里指存储数据和指令的设备。一个连续的固定字宽的单元的数组（Words or Locations），每一个单元都有唯一的地址（Address）。</p><p>下面我们将内存中的某个字简称为Memory[address]，RAM[address]，或者 M[address]。</p><h2 id="处理器（Processor）"><a href="#处理器（Processor）" class="headerlink" title="处理器（Processor）"></a>处理器（Processor）</h2><p>也叫做中央处理单元（Central Processing Unit or CPU），指能够执行一些固定的基本操作的设备，包括算术和逻辑操作，内存访问操作，控制（也被称作分支，Branching）操作。操作数（Operands）是来自寄存器或内存的二进制值，同样，操作结果也存放在寄存器或者内存中。</p><h2 id="寄存器（Register）"><a href="#寄存器（Register）" class="headerlink" title="寄存器（Register）"></a>寄存器（Register）</h2><p>内存访问是一个相对较慢的操作，需要长指令格式（比如可能需要32位的地址）。于是，大多数处理器都配备有寄存器，每个寄存器能存一个值。寄存器相当于一个位于处理器的高速本地内存，可以快速操纵数据和指令。它使程序减少内存访问，以提高程序执行效率。</p><h1 id="语言（Languages）"><a href="#语言（Languages）" class="headerlink" title="语言（Languages）"></a>语言（Languages）</h1><p>机器语言是一系列的被编码的指令，它的含义取决于硬件细节和机器语言语法。</p><p>由于二进制码的含义相当晦涩，通常机器语言会指定它的二进制码（Binary codes）和符号助记符（Symbolic mnemonics）。</p><p>比如，假设有某种add操作，可以直接写成1010001100011001，或者用符号写成ADD R3,R1,R9。</p><p>我们不仅可以借助符号读程序，也可以这样写程序而不必使用二进制。我们可以使用一个文本处理程序，将符号解析为二进制机器指令。这个符号就叫做汇编语言（Assembly language, or simply assembly），这个程序叫做汇编器（Assembler），这个过程叫做汇编。</p><p>不同的计算机的CPU的操作、寄存器的种类和数量、汇编语言的语法都有可能不同（a Tower of Babel of machine languages）。</p><p>尽管不同，它们却都有一些相似的通用的命令。</p><h1 id="指令（Commands）"><a href="#指令（Commands）" class="headerlink" title="指令（Commands）"></a>指令（Commands）</h1><h2 id="算术和逻辑运算（Arithmetic-and-Logic-Operations）"><a href="#算术和逻辑运算（Arithmetic-and-Logic-Operations）" class="headerlink" title="算术和逻辑运算（Arithmetic and Logic Operations）"></a>算术和逻辑运算（Arithmetic and Logic Operations）</h2><p>每一个计算机都要进行基本的算术和逻辑运算。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_4_0.png" alt="算术和逻辑运算" title>                </div>                <div class="image-caption">算术和逻辑运算</div>            </figure><h2 id="内存访问（Memory-Access）"><a href="#内存访问（Memory-Access）" class="headerlink" title="内存访问（Memory Access）"></a>内存访问（Memory Access）</h2><p>内存访问指令有2类，一是算术和逻辑运算命令，可能不仅操纵寄存器，还有内存，二是存取（load and store）命令，会在寄存器和内存之间移动数据。内存访问命令有不同的寻址方式（Addressing modes），也就是获取内存的字的具体的方法。通常，不同的计算机提供不同的可能方式和表达，但是以下3种一般都会支持。</p><h3 id="直接寻址（Direct-addressing）"><a href="#直接寻址（Direct-addressing）" class="headerlink" title="直接寻址（Direct addressing）"></a>直接寻址（Direct addressing）</h3><p>直接给出具体地址或者用符号表示一个具体的地址。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_4_1.png" alt="直接寻址" title>                </div>                <div class="image-caption">直接寻址</div>            </figure><h3 id="立即数寻址（Immediate-addressing）"><a href="#立即数寻址（Immediate-addressing）" class="headerlink" title="立即数寻址（Immediate addressing）"></a>立即数寻址（Immediate addressing）</h3><p>加载常数（出现在指令编码中的值）到寄存器。不是这个常数所对应的地址上的值，而是这个常数本身。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_4_2.png" alt="立即数寻址" title>                </div>                <div class="image-caption">立即数寻址</div>            </figure><h3 id="间接寻址（Indirect-addressing）"><a href="#间接寻址（Indirect-addressing）" class="headerlink" title="间接寻址（Indirect addressing）"></a>间接寻址（Indirect addressing）</h3><p>地址没有被硬编码到指令中，而是指定了一个保存所需地址的内存位置。这种方式被用于处理指针（Pointers）。</p><p>比如，高级指令x=foo[j]，foo是一个数组变量，x、j是整型变量。在声明和初始化foo后，编译器分配一个内存段来保存数组数据，使foo指代一个段的基地址（Base address）。foo[j]就是在foo上偏移了一个j的地址上的值。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_4_3.png" alt="间接寻址" title>                </div>                <div class="image-caption">间接寻址</div>            </figure><h2 id="控制流（Flow-of-Control）"><a href="#控制流（Flow-of-Control）" class="headerlink" title="控制流（Flow of Control）"></a>控制流（Flow of Control）</h2><p>当一个程序线性地执行命令时，可能会出现分支跳转到一个地址，而不是继续执行下一个命令。</p><p>分支的目的有很多，比如循环（Repetition），条件执行（Conditional execution），子程序调用（Subroutine calling）。跳转的位置可以是一个给定的标记（Label）。</p><p>跳转有无条件跳转（Unconditional jump）和有条件跳转（Conditional jump，可以有明确的布尔条件或者是上一个命令的作用）。</p><p>以上为机器语言的介绍，接下来是Hack的机器语言的描述。</p><h1 id="Hack的机器语言"><a href="#Hack的机器语言" class="headerlink" title="Hack的机器语言"></a>Hack的机器语言</h1><p>注意：Hack的机器语言是一种很简单的机器语言，现在大多数计算机都有比Hack更复杂的指令、数据类型、寄存器、指令格式、寻址方式（当然Hack可以用软件来实现它们）。</p><h2 id="概观"><a href="#概观" class="headerlink" title="概观"></a>概观</h2><p>Hack是一个冯诺依曼结构的计算机，16位，组成部分有CPU、2个分立的存储模块（一个指令存储器、一个数据存储器）、2个内存映射I/O设备（一个屏幕、一个键盘）。</p><h2 id="内存地址空间"><a href="#内存地址空间" class="headerlink" title="内存地址空间"></a>内存地址空间</h2><p>Hack程序员关注2个地址空间：指令存储器和数据存储器。2个存储器都是16位字长，15位的地址空间，即每个存储器存储容量是32K（即$2^{15}$）$\times$16 bit。</p><p>CPU只执行指令存储器中的指令。这里的指令存储器是一个只读的设备，程序是由一些外部方法写入的。比如，一个预先烧录好的ROM芯片可以实现指令存储器。如果要一个新的程序需要换一个ROM。</p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>关注2个16位的寄存器，D寄存器和A寄存器，它们可以被算术和逻辑指令操纵。D寄存器用来存数据，A寄存器当作数据以及地址（指令存储器或数据存储器的地址）的寄存器。</p><p>A寄存器可以加快直接访问存储器。Hack的指令是16位的，地址是15位的，所以不可能把操作和地址放在一条指令中。于是Hack的内存访问指令会操纵一个隐式的地址，标记为M。</p><p>比如，对于数据存储器，要实现的是D=Memory[516]-1，我们就先用一条指令设置A寄存器为516，再用一条D=M-1指令。</p><p>比如，对于指令存储器，要实现的是goto 35，先用一条指令设置A寄存器为35，再使用goto指令，计算机会在下一个时钟周期取InstructionMemory[35]的指令。</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>Hack的2种基础指令：</p><ul><li>地址指令 A指令</li><li>计算指令 C指令</li></ul><h3 id="A指令"><a href="#A指令" class="headerlink" title="A指令"></a>A指令</h3><p>设置A寄存器为一个15位的值。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_4_4.png" alt="A指令" title>                </div>                <div class="image-caption">A指令</div>            </figure><p>A指令的3种用处：</p><ul><li>设置常数</li><li>设置后续C指令阶段要操纵的数据存储器的地址</li><li>设置后续C指令阶段要操纵的指令存储器的地址</li></ul><h3 id="C指令"><a href="#C指令" class="headerlink" title="C指令"></a>C指令</h3><p>决定计算机的所有可能操作。指令有3个部分，解决3个问题，计算什么（comp），在哪里存储被计算的值（dest），下一步做什么（jump）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_4_5.png" alt="C指令" title>                </div>                <div class="image-caption">C指令</div>            </figure><h4 id="comp部分"><a href="#comp部分" class="headerlink" title="comp部分"></a>comp部分</h4><p>这里出现的+、-等符号应作为助记符的一部分，而不是一种操作符（比如D+A可以当作ADD。。。？）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_4_6.png" alt="comp" title>                </div>                <div class="image-caption">comp</div>            </figure><h4 id="dest部分"><a href="#dest部分" class="headerlink" title="dest部分"></a>dest部分</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_4_7.png" alt="dest" title>                </div>                <div class="image-caption">dest</div>            </figure><h4 id="jump部分"><a href="#jump部分" class="headerlink" title="jump部分"></a>jump部分</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_4_8.png" alt="jump" title>                </div>                <div class="image-caption">jump</div>            </figure><h4 id="A寄存器的冲突使用"><a href="#A寄存器的冲突使用" class="headerlink" title="A寄存器的冲突使用"></a>A寄存器的冲突使用</h4><p>C指令中，A寄存器既可以用于访问数据存储器的M，也可以访问指令存储器。为了避免冲突，一条指令中A寄存器不能同时使用这2种用法。</p><h2 id="符号（Symbols）"><a href="#符号（Symbols）" class="headerlink" title="符号（Symbols）"></a>符号（Symbols）</h2><p>在汇编语言中，访问一个内存地址，可以使用常数或者符号。</p><p>符号有以下3种：</p><h3 id="预定义符号（Predefined-symbols）"><a href="#预定义符号（Predefined-symbols）" class="headerlink" title="预定义符号（Predefined symbols）"></a>预定义符号（Predefined symbols）</h3><p>RAM的一部分地址可以用预定义符号指定。</p><ul><li>虚拟寄存器（Virtual registers）：用R0~R15指定RAM[0]~RAM[15]。</li><li>预定义指针（Predefined pointers）：用SP、LCL、ARG、THIS、THAT指定RAM[0]~RAM[4]。</li><li>I/O指针（I/O pointers）：用SCREEN、KBD指定RAM[16384]（RAM[0x4000]）和RAM[24576]（RAM[0x6000]），这是屏幕和键盘的内存映射的基地址。</li></ul><h3 id="标记符号（Label-symbols）"><a href="#标记符号（Label-symbols）" class="headerlink" title="标记符号（Label symbols）"></a>标记符号（Label symbols）</h3><p>用户定义的用于表示goto的目的地址的符号，用伪命令“(Xxx)”来声明。</p><h3 id="变量符号（Variable-symbols）"><a href="#变量符号（Variable-symbols）" class="headerlink" title="变量符号（Variable symbols）"></a>变量符号（Variable symbols）</h3><p>用户定义的符号Xxx，Xxx不是预定义符号和标记符号，那么就是一个变量，汇编器会分配一个唯一的内存地址，从RAM[0x0010]开始。</p><h2 id="输入-输出处理（Input-Output-Handling）"><a href="#输入-输出处理（Input-Output-Handling）" class="headerlink" title="输入/输出处理（Input/Output Handling）"></a>输入/输出处理（Input/Output Handling）</h2><p>Hack有2个外设（peripheral devices），屏幕和键盘。它们通过内存映射（memory maps）来交互。物理I/O设备和内存映射通过持续的刷新循环来同步。</p><h3 id="屏幕"><a href="#屏幕" class="headerlink" title="屏幕"></a>屏幕</h3><p>256行、每行512个像素的黑白的屏幕。从RAM[0x4000]开始有8K words的内存映射，从左上角开始一个位代表一个像素，1=black，0=white。第r行第c列的像素被映射到RAM[0x4000+r*32+c/16]个word的第c%16位（从LSB到MSB）。</p><h3 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h3><p>只有RAM[0x6000]一个word的内存映射，某按键被按下，这里存的就是ASCII码，没有按键按下就是0。</p><p>其他的按键对应的数字：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_4_9.png" alt="键码" title>                </div>                <div class="image-caption">键码</div>            </figure><h2 id="语法约定和文件格式（Syntax-Conventions-and-File-Format）"><a href="#语法约定和文件格式（Syntax-Conventions-and-File-Format）" class="headerlink" title="语法约定和文件格式（Syntax Conventions and File Format）"></a>语法约定和文件格式（Syntax Conventions and File Format）</h2><h3 id="二进制文件（Binary-code-files）"><a href="#二进制文件（Binary-code-files）" class="headerlink" title="二进制文件（Binary code files）"></a>二进制文件（Binary code files）</h3><p>扩展名为hack。一行一个16位01串，指定一个机器语言指令。</p><h3 id="汇编文件（Assembly-language-files）"><a href="#汇编文件（Assembly-language-files）" class="headerlink" title="汇编文件（Assembly language files）"></a>汇编文件（Assembly language files）</h3><p>扩展名为asm。</p><p>每行为一个Instruction或者 (Symbol)。</p><p>常量非负且为10进制，用户定义的符号可以是字母、数字、下划线（_）、点（.）、美元符号（$）、冒号（:），不能以数字开头。</p><p>//后为单行注释。</p><p>约定标记名大写，变量名小写。</p><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><p>这次使用2个新的工具，汇编器和CPU模拟器。</p><p><a href="https://www.nand2tetris.org/software" target="_blank" rel="noopener">下载</a></p><p><a href="https://docs.wixstatic.com/ugd/44046b_759f4f811ad14e12ac45bc60dd679fa3.pdf" target="_blank" rel="noopener">汇编器的使用说明</a></p><p><a href="https://docs.wixstatic.com/ugd/44046b_f63aba2611944e82974c9c5d5a3821fe.pdf" target="_blank" rel="noopener">CPU模拟器的使用说明</a></p><p>project要求用汇编语言编写2个程序。</p><p>乘法程序（Mult.asm）：实现R0乘R1，结果放在R2。</p><p>I/O处理程序（Fill.asm）：按下任意按键屏幕变黑，否则变白。</p><p>（我的代码见github</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;机器语言处于软件和硬件之间，既是一个编程工具，也是硬件平台的组成部分。它旨在编写低级程序当作一系列的机器指令，这些指令命令处理器执行算术和逻
      
    
    </summary>
    
      <category term="课程" scheme="https://4eay7lab.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="计算机系统" scheme="https://4eay7lab.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="nand2tetris" scheme="https://4eay7lab.com/tags/nand2tetris/"/>
    
      <category term="本科补全" scheme="https://4eay7lab.com/tags/%E6%9C%AC%E7%A7%91%E8%A1%A5%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>nand2tetris ch3 时序逻辑</title>
    <link href="https://4eay7lab.com/2019/07/07/nand2tetris-3/"/>
    <id>https://4eay7lab.com/2019/07/07/nand2tetris-3/</id>
    <published>2019-07-06T16:00:03.000Z</published>
    <updated>2020-10-26T07:31:31.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>1、2章的芯片都是组合逻辑电路（Combinational logic circuit），输出只取决于输入，不能保持状态。</p><p>时序逻辑电路（Sequential logic circuit）不仅能计算值，而且能够存储值（存在反馈回路）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_3_0.png" alt="组合逻辑和时序逻辑" title>                </div>                <div class="image-caption">组合逻辑和时序逻辑</div>            </figure><p>存储器的实现涉及到同步、计时、反馈回路，最基础的时序电路芯片是触发器（Flip-flop），通过它可以构建出计算机系统的存储设备。当然现代计算机的存储器不总是用FF造的，现代存储芯片总是利用存储技术的基础物理特性实现最优化，用哪种技术取决于性价比。</p><h1 id="时钟（Clock）"><a href="#时钟（Clock）" class="headerlink" title="时钟（Clock）"></a>时钟（Clock）</h1><p>在大多数计算机中，时间的流逝是通过一个主时钟（Master clock）传递一个连续的交流信号来表示的。</p><p>硬件实现是基于一个有源晶振 或 振荡器（英文Oscillator，内部有时钟电路，供电即可产生振荡信号。还有一种无源晶振或谐振器，英文为Crystal，需要借助时钟电路产生振荡信号。硬件模拟器中需要用户或脚本实现），它会交替产生高低电平，一个0-1（或者 low-high/tick-tock）为一个周期（Cycle），每一个时钟周期是一个单位时间。</p><p>这个信号被同时广播到计算机的每一个时序芯片上。</p><h1 id="触发器（Flip-flop）"><a href="#触发器（Flip-flop）" class="headerlink" title="触发器（Flip-flop）"></a>触发器（Flip-flop）</h1><p>它是最基础的时序电路芯片，有多种变种，这里使用的是DFF（Data flip-flop，这里用到的似乎是下降沿触发的。。）。一位数据输入，一个时钟输入（信号来自主时钟），一位数据输出，实现$out(t)=in(t-1)$。</p><h1 id="寄存器（Register）"><a href="#寄存器（Register）" class="headerlink" title="寄存器（Register）"></a>寄存器（Register）</h1><h2 id="1位的寄存器"><a href="#1位的寄存器" class="headerlink" title="1位的寄存器"></a>1位的寄存器</h2><p>用DFF造一个1位的寄存器，也叫做Bit。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_3_1.png" alt="1 bit" title>                </div>                <div class="image-caption">1 bit</div>            </figure><h2 id="w位的寄存器"><a href="#w位的寄存器" class="headerlink" title="w位的寄存器"></a>w位的寄存器</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_3_2.png" alt="w bit" title>                </div>                <div class="image-caption">w bit</div>            </figure><h1 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h1><h2 id="随机存取存储器（RAM）"><a href="#随机存取存储器（RAM）" class="headerlink" title="随机存取存储器（RAM）"></a>随机存取存储器（RAM）</h2><p>读写操作要访问任意一个单元，访问的顺序没有限制，任意位置，访问速度一样。</p><p>输入包括，一个数据输入、一个地址输入、一个load位。</p><p>参数：</p><ul><li>字长（data-width）：一个word多少位</li><li>字数（size）：多少个words</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_3_3.png" alt="RAMn" title>                </div>                <div class="image-caption">RAMn</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_3_4.png" alt="RAMn" title>                </div>                <div class="image-caption">RAMn</div>            </figure><h2 id="存储器的递归构建"><a href="#存储器的递归构建" class="headerlink" title="存储器的递归构建"></a>存储器的递归构建</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_3_5.png" alt="存储器的递归构建" title>                </div>                <div class="image-caption">存储器的递归构建</div>            </figure><h1 id="计数器（Counter）"><a href="#计数器（Counter）" class="headerlink" title="计数器（Counter）"></a>计数器（Counter）</h1><p>每个时间单位输出都有一个增量，$out(t)=out(t-1)+c$，c一般是1。通常计数器有一些额外的功能，可以从0或者某一个数（counting base）开始，可以是减少一个量。</p><p>比如，CPU的程序计数器（Program counter，简称PC）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_3_6.png" alt="PC" title>                </div>                <div class="image-caption">PC</div>            </figure><h1 id="消除组合逻辑中的冒险"><a href="#消除组合逻辑中的冒险" class="headerlink" title="消除组合逻辑中的冒险"></a>消除组合逻辑中的冒险</h1><p>DFF使时序芯片保持一个状态或者改变一个状态，避免了组合电路的不可控的数据竞争（Data race）的影响。</p><p>在改变输入值时，由于一些物理限制（距离、阻碍、干扰、噪声等），几个输入值传输到芯片的时间不一样（数电上称为竞争。。），会使输出在一段时间内产生不正确的结果（数电上称为冒险。。）。</p><p>组合电路中输出只由输入控制，和时间无关，所以中间可能会出现不正确输出。</p><p>时序电路中的DFF保证输出只在进入一个新的时钟周期的一刻改变（其他时间是锁存的），也就是我们允许在一个周期内出现不稳定的状态，在下一个周期开始时是合法的状态。</p><p>所以消除冒险的方法是，时钟周期的时间比传输数据的时间稍长，保证时序芯片更新状态时的输入是合法的。由此实现系统硬件各个部分的同步来达到良好协调。</p><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><p>project依然是用之前造好的芯片来实现这一章的芯片（除了DFF）。（我的代码见github</p><p>这一章的DFF不用了解具体实现（详细内容见数电课程），相当于之前的Nand，这里直接拿来构造其它时序电路就行。</p><p>需要查看硬件模拟器使用说明的4-5部分，以及附录A6-7。</p><p>需要建造的芯片列表：</p><ul><li>Bit</li><li>Register</li><li>PC</li><li>RAM8</li><li>RAM64</li><li>RAM512</li><li>RAM4K</li><li>RAM16K</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;1、2章的芯片都是组合逻辑电路（Combinational logic circuit），输出只取决于输入，不能保持状态。&lt;/p&gt;
&lt;p&gt;时
      
    
    </summary>
    
      <category term="课程" scheme="https://4eay7lab.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="计算机系统" scheme="https://4eay7lab.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="nand2tetris" scheme="https://4eay7lab.com/tags/nand2tetris/"/>
    
      <category term="本科补全" scheme="https://4eay7lab.com/tags/%E6%9C%AC%E7%A7%91%E8%A1%A5%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>nand2tetris ch2 布尔运算</title>
    <link href="https://4eay7lab.com/2019/07/07/nand2tetris-2/"/>
    <id>https://4eay7lab.com/2019/07/07/nand2tetris-2/</id>
    <published>2019-07-06T16:00:02.000Z</published>
    <updated>2020-10-26T07:31:31.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这一章要使用之前制造的基本逻辑门，来制造出算术逻辑单元（ALU），这个芯片执行计算机的所有的算术和逻辑运算，对于理解CPU和计算机很重要。</p><p>首先，要造一个加法器（adder），在此之前需要了解以下知识。</p><h1 id="二进制数"><a href="#二进制数" class="headerlink" title="二进制数"></a>二进制数</h1><p>了解一下进制、进制转换，在此不总结。</p><h1 id="二进制数加法"><a href="#二进制数加法" class="headerlink" title="二进制数加法"></a>二进制数加法</h1><p>和十进制加法类似，从LSB开始对应的位相加，一直加到MSB，若某一位产生进位1，则加到下一位，MSB如果产生了进位，就是溢出（overflow）。可以发现能由全加器构建。</p><h1 id="有符号二进制数"><a href="#有符号二进制数" class="headerlink" title="有符号二进制数"></a>有符号二进制数</h1><p>n位二进制系统可以产生$2^n$个不同的位模式。为了表示有符号二进制数，一个自然的方法是把空间分为2个大小相等的子集，一个子集表示正数，另一个子集表示负数。</p><p>有符号数的编码方式应当使得硬件实现尽量简单。现在常用的方法是二补数或补码（2’s complement，或基数为2的radix complement）。在n位二进制系统，一个数x的补码的定义如下：</p><p>$\overline{x}=\begin{cases}2^n-x,&amp;x\ne0 \cr 0 ,&amp; otherwise\end{cases}$</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_2_0.png" alt="2s" title="complement">                </div>                <div class="image-caption">complement</div>            </figure><p>可以发现补码表示的性质：</p><ul><li><p>一个系统共可以表示$2^n$个有符号数，范围是$[-2^{n-1},2^{n-1}-1]$。</p></li><li><p>正数的MSB为0，负数的MSB为1。</p></li><li><p>由x得到-x的方法是，除了最低一位的1以及比它低位的0（lowbit？），每一位取反。还有一种硬件实施更简单的方法，所有位取反，然后加1。</p></li></ul><p>补码表示的好处是有符号数的加法不需要特殊的硬件。2个有符号数相加，直接用它们的补码表示相加。2个有符号数相减，如x-y，相当于x+(-y)，即x的补码表示和-y的补码表示相加。</p><h1 id="加法器（Adders）"><a href="#加法器（Adders）" class="headerlink" title="加法器（Adders）"></a>加法器（Adders）</h1><p>这里要知道3种</p><h2 id="半加器（Half-adder）"><a href="#半加器（Half-adder）" class="headerlink" title="半加器（Half-adder）"></a>半加器（Half-adder）</h2><p>2个1位的数相加，不考虑低位的进位。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_2_1.png" alt="half adder" title>                </div>                <div class="image-caption">half adder</div>            </figure><h2 id="全加器（Full-adder）"><a href="#全加器（Full-adder）" class="headerlink" title="全加器（Full-adder）"></a>全加器（Full-adder）</h2><p>3个1位的数相加，c是来自低位的进位。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_2_2.png" alt="full adder" title>                </div>                <div class="image-caption">full adder</div>            </figure><h2 id="加法器（Adder）"><a href="#加法器（Adder）" class="headerlink" title="加法器（Adder）"></a>加法器（Adder）</h2><p>2个n位的数相加，这里n=16。这里实现直接用全加器串联。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_2_3.png" alt="adder" title>                </div>                <div class="image-caption">adder</div>            </figure><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>这里用的加法器的实现是模拟笔算，称为串行进位加法器，结构简单，然而运行速度慢，一般解决方法是使用超前进位加法器。</p><p>还有一种特殊目的的加法器，增量器（Incrementer），可以给1个数加1。</p><h1 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h1><p>这里介绍Hack使用的ALU，它计算$out=f_i(x,y)$，$f_i$是某种算术和逻辑运算，这里的$f_i$有18种。我们通过6个控制位（control bits）来控制使用的$f_i$。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_2_4.png" alt="ALU" title>                </div>                <div class="image-caption">ALU</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_2_5.png" alt="ALU真值表" title>                </div>                <div class="image-caption">ALU真值表</div>            </figure><p>这里没有乘法或者除法以及其他一些运算，这些运算会在OS一章实现。详细的布尔运算和ALU设计可以在其他计算机体系结构的书中找到。</p><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><p>project要求使用之前章节造好的芯片，实现一个ALU（我的代码见github</p><p>需要建造的芯片列表：</p><ul><li>HalfAdder</li><li>FullAdder</li><li>Add16</li><li>Inc16</li><li>ALU</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;这一章要使用之前制造的基本逻辑门，来制造出算术逻辑单元（ALU），这个芯片执行计算机的所有的算术和逻辑运算，对于理解CPU和计算机很重要。&lt;
      
    
    </summary>
    
      <category term="课程" scheme="https://4eay7lab.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="计算机系统" scheme="https://4eay7lab.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="nand2tetris" scheme="https://4eay7lab.com/tags/nand2tetris/"/>
    
      <category term="本科补全" scheme="https://4eay7lab.com/tags/%E6%9C%AC%E7%A7%91%E8%A1%A5%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>nand2tetris ch1 布尔逻辑</title>
    <link href="https://4eay7lab.com/2019/07/07/nand2tetris-1/"/>
    <id>https://4eay7lab.com/2019/07/07/nand2tetris-1/</id>
    <published>2019-07-06T16:00:01.000Z</published>
    <updated>2020-10-26T07:31:31.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>基于物理学制造出晶体管，晶体管和电路构造出与非门（Nand），与非门（或者 或非门，它们是primitive gates，其它门都是composite gates）可以构造出与门、或门、非门，于是可构造出各种数字电路（任何布尔表达式都可以用与、或、非表示）。<br>所以要构建计算机（课程中名为Hack，一个16位计算机），首先需要了解的是Nand相关的知识。</p><p>学习Nand前，先学习布尔代数、真值表、布尔表达式、范式，这些在此不做总结。</p><p>这里我们只关注一个芯片的外部接口（输入、输出），不关注具体实现。</p><h1 id="基本逻辑门"><a href="#基本逻辑门" class="headerlink" title="基本逻辑门"></a>基本逻辑门</h1><h2 id="与门、或门、非门"><a href="#与门、或门、非门" class="headerlink" title="与门、或门、非门"></a>与门、或门、非门</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_1_0.png" alt="and or not" title>                </div>                <div class="image-caption">and or not</div>            </figure><h2 id="异或门（Exclusive-or）"><a href="#异或门（Exclusive-or）" class="headerlink" title="异或门（Exclusive or）"></a>异或门（Exclusive or）</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_1_1.png" alt="xor" title>                </div>                <div class="image-caption">xor</div>            </figure><h2 id="数据选择器（Multiplexor）"><a href="#数据选择器（Multiplexor）" class="headerlink" title="数据选择器（Multiplexor）"></a>数据选择器（Multiplexor）</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_1_2.png" alt="mux" title>                </div>                <div class="image-caption">mux</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_1_3.png" alt="mux真值表" title>                </div>                <div class="image-caption">mux真值表</div>            </figure><h2 id="数据分配器（Demultiplexor）"><a href="#数据分配器（Demultiplexor）" class="headerlink" title="数据分配器（Demultiplexor）"></a>数据分配器（Demultiplexor）</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_1_4.png" alt="dmux" title>                </div>                <div class="image-caption">dmux</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_1_5.png" alt="dmux真值表" title>                </div>                <div class="image-caption">dmux真值表</div>            </figure><h1 id="多位（Multi-bit）版本的基本门电路"><a href="#多位（Multi-bit）版本的基本门电路" class="headerlink" title="多位（Multi-bit）版本的基本门电路"></a>多位（Multi-bit）版本的基本门电路</h1><p>输入输出可能是多于1位的二进制数，按位做运算。</p><h1 id="多路（Multi-way）版本的基本门电路"><a href="#多路（Multi-way）版本的基本门电路" class="headerlink" title="多路（Multi-way）版本的基本门电路"></a>多路（Multi-way）版本的基本门电路</h1><p>有更多的输入输出针脚，实现类似操作。</p><h1 id="硬件描述语言（HDL）"><a href="#硬件描述语言（HDL）" class="headerlink" title="硬件描述语言（HDL）"></a>硬件描述语言（HDL）</h1><p>现实生活中要生产芯片，需要电路要达到预期的功能，最快的速度，最少的花费，大多数人不会直接制造，而是会先在软件上模拟电路的运行。</p><p>课程提供了一个硬件模拟器。</p><p><a href="https://www.nand2tetris.org/software" target="_blank" rel="noopener">下载</a></p><p><a href="https://docs.wixstatic.com/ugd/44046b_bfd91435260748439493a60a8044ade6.pdf" target="_blank" rel="noopener">使用说明</a></p><p>HDL的编写和测试脚本的编写见书附录A、B。</p><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><p>project要求使用内建的Nand，编写HDL代码构造其他芯片（我的代码见github</p><p>需要运行硬件模拟器，查看其使用说明的1-3部分，以及附录A1-6。</p><p>需要建造的芯片列表：</p><ul><li>Not</li><li>Not16</li><li>And</li><li>And16</li><li>Or</li><li>Or8Way</li><li>Or16</li><li>DMux</li><li>DMux4Way</li><li>DMux8Way</li><li>Mux</li><li>Mux16</li><li>Mux4Way16</li><li>Mux8Way16</li><li>Xor</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;基于物理学制造出晶体管，晶体管和电路构造出与非门（Nand），与非门（或者 或非门，它们是primitive gates，其它门都是comp
      
    
    </summary>
    
      <category term="课程" scheme="https://4eay7lab.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="计算机系统" scheme="https://4eay7lab.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="nand2tetris" scheme="https://4eay7lab.com/tags/nand2tetris/"/>
    
      <category term="本科补全" scheme="https://4eay7lab.com/tags/%E6%9C%AC%E7%A7%91%E8%A1%A5%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>nand2tetris ch0 介绍</title>
    <link href="https://4eay7lab.com/2019/07/07/nand2tetris-0/"/>
    <id>https://4eay7lab.com/2019/07/07/nand2tetris-0/</id>
    <published>2019-07-06T16:00:00.000Z</published>
    <updated>2020-10-26T07:31:31.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这是一门基于项目的自下而上构建计算机的有趣的课程。</p><p>按照以下层次自下而上讲解每一层的构建，每到一层只关心这一层的实现，不关注下面层次的具体实现。</p><p>总体不深入，比较浅显易懂。现代计算机体系结构中的2个重要的概念，流水线和存储层次，几乎没有涉及。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_0_0.png" alt="课程内容" title>                </div>                <div class="image-caption">课程内容</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/n2t_0_1.png" alt="典型计算机系统设计中的组成要素的抽象" title>                </div>                <div class="image-caption">典型计算机系统设计中的组成要素的抽象</div>            </figure><h1 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h1><h2 id="本课程"><a href="#本课程" class="headerlink" title="本课程"></a>本课程</h2><p><a href="https://www.nand2tetris.org/" target="_blank" rel="noopener">官网</a></p><p><a href="https://www.coursera.org/learn/build-a-computer" target="_blank" rel="noopener">coursera(硬件部分)</a></p><p><a href="https://www.coursera.org/learn/nand2tetris2" target="_blank" rel="noopener">coursera(软件部分)</a></p><p>配套书籍：<em>The Elements of Computing Systems: Building a Modern Computer from First Principles</em></p><h2 id="其它相关课程"><a href="#其它相关课程" class="headerlink" title="其它相关课程"></a>其它相关课程</h2><p><a href="http://inst.eecs.berkeley.edu/~cs61c/sp15/" target="_blank" rel="noopener">Berkeley’s CS61C</a></p><p>计组最经典的还是这本 _(:°з」∠)_：<br><em>Computer Organization and Design MIPS Edition: The Hardware/Software Interface (The Morgan Kaufmann Series in Computer Architecture and Design)</em></p><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>blog中会进行关键知识的总结记录。目标是完成前6章。</p><p>已经完成的章节：</p><p><a href="https://4eay7lab.com/2019/07/07/nand2tetris-1.html">ch1 布尔逻辑</a></p><p><a href="https://4eay7lab.com/2019/07/07/nand2tetris-2.html">ch2 布尔运算</a></p><p><a href="https://4eay7lab.com/2019/07/07/nand2tetris-3.html">ch3 时序逻辑</a></p><p><a href="https://4eay7lab.com/2019/07/07/nand2tetris-4.html">ch4 机器语言</a></p><p><a href="https://4eay7lab.com/2019/07/09/nand2tetris-5.html">ch5 计算机体系结构</a></p><p><a href="https://4eay7lab.com/2019/07/11/nand2tetris-6.html">ch6 汇编器</a></p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p><a href="https://github.com/easypainttou/nand2tetris_solutions" target="_blank" rel="noopener">我的projects解决方案</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;这是一门基于项目的自下而上构建计算机的有趣的课程。&lt;/p&gt;
&lt;p&gt;按照以下层次自下而上讲解每一层的构建，每到一层只关心这一层的实现，不关注下
      
    
    </summary>
    
      <category term="课程" scheme="https://4eay7lab.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="计算机系统" scheme="https://4eay7lab.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="nand2tetris" scheme="https://4eay7lab.com/tags/nand2tetris/"/>
    
      <category term="本科补全" scheme="https://4eay7lab.com/tags/%E6%9C%AC%E7%A7%91%E8%A1%A5%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>NEW log!</title>
    <link href="https://4eay7lab.com/2019/07/06/hello-world/"/>
    <id>https://4eay7lab.com/2019/07/06/hello-world/</id>
    <published>2019-07-05T16:00:00.000Z</published>
    <updated>2020-10-26T07:31:31.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><h2 id="2019-7-6"><a href="#2019-7-6" class="headerlink" title="2019-7-6"></a>2019-7-6</h2><p>从wp迁移到jekyll</p><h2 id="2019-8-5-2019-8-7"><a href="#2019-8-5-2019-8-7" class="headerlink" title="2019-8-5~2019-8-7"></a>2019-8-5~2019-8-7</h2><p>由于一些jekyll的缺点，从jekyll迁回hexo</p><h2 id="2019-12-31"><a href="#2019-12-31" class="headerlink" title="2019-12-31"></a>2019-12-31</h2><p>添加了置顶</p><hr><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p><a href="https://github.com/easypainttou/oi_solutions" target="_blank" rel="noopener">oi/icpc题解传送门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;记录&quot;&gt;&lt;a href=&quot;#记录&quot; class=&quot;headerlink&quot; title=&quot;记录&quot;&gt;&lt;/a&gt;记录&lt;/h1&gt;&lt;h2 id=&quot;2019-7-6&quot;&gt;&lt;a href=&quot;#2019-7-6&quot; class=&quot;headerlink&quot; title=&quot;2019-7-6&quot;
      
    
    </summary>
    
      <category term="其它" scheme="https://4eay7lab.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="记录" scheme="https://4eay7lab.com/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>
